<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright FUJITSU LIMITED 2017-->
 
<project name="BSS glassfish macro definitions" default="" basedir=".">

  <description />

  <!-- <property name="working.dir" value="${basedir}" /> -->
  <property name="dbproperties.file" location="${working.dir}/db.properties" />
  <property file="${dbproperties.file}" />
  <property name="glassfishproperties.file" location="${working.dir}/glassfish.properties" />
  <property file="${glassfishproperties.file}" />

  <!-- default domain settings -->
  <property name="defaultuser" value="${glassfish.bes.domain.admin.user}" />
  <property name="defaultpwd" value="${glassfish.bes.domain.admin.pwd}" />
  <property name="defaultmasterpwd" value="changeit" />
  <property name="defaultport" value="4848" />
  <condition property="isWindows">
    <os family="windows" />
  </condition>

  <!-- Glassfish properties -->
  <macrodef name="glassfishProperties">
    <sequential>
      <!-- glassfish home, asadmin, imq -->
      <condition property="batch.extension" value=".bat" else="">
        <os family="windows" />
      </condition>
      <condition property="extension" value=".exe" else="">
        <os family="windows" />
      </condition>
      <condition property="glassfish.home" value="${GLASSFISH_HOME}">
        <isset property="GLASSFISH_HOME" />
      </condition>
      <property name="glassfish.asadmin.file" location="${glassfish.home}/bin/asadmin${batch.extension}" />
      <property name="glassfish.imq.dir" value="${glassfish.home}/mq/bin" />
    </sequential>
  </macrodef>

  <macrodef name="echoGlassfishProperties">
    <sequential>
      <echo message="--- glassfish properties ---" />
      <echo message="glassfish.home: ${glassfish.home}" />
      <echo message="glassfish.asadmin.file: ${glassfish.asadmin.file}" />
      <echo message="glassfish.imq.dir: ${glassfish.imq.dir}" />
    </sequential>
  </macrodef>

  <macrodef name="verifyGlassfishProperties">
    <sequential>
      <condition property="glassfish.properties.complete">
        <and>
          <isset property="glassfish.home" />
          <isset property="glassfish.asadmin.file" />
          <isset property="glassfish.imq.dir" />
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- needed for gf.asadmin macros -->
  <glassfishProperties />

  <macrodef name="create.pwd.file">
    <attribute name="pwd" default="${defaultpwd}" />
    <attribute name="masterpwd" default="${defaultmasterpwd}" />
    <attribute name="fileprefix" default="script" />
    <attribute name="property" default="temp.pwd.file" />
    <sequential>
      <mkdir dir="${java.io.tmpdir}/BES" />
      <tempfile property="@{property}" destdir="${java.io.tmpdir}/BES" prefix="@{fileprefix}" suffix=".txt" deleteonexit="true" />
      <echo file="${@{property}}" append="false">
AS_ADMIN_PASSWORD=@{pwd}
AS_ADMIN_MASTERPASSWORD=@{masterpwd}
	  </echo>
    </sequential>
  </macrodef>

  <macrodef name="asadmin_noauth">
    <attribute name="command" />
    <attribute name="failonerror" default="true" />
    <element name="args" implicit="yes" optional="yes" />
    <sequential>
      <echo message="asadmin @{command}" level="info" />
      <exec executable="${glassfish.asadmin.file}" failonerror="@{failonerror}">
        <arg value="@{command}" />
        <args />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="asadmin">
    <attribute name="command" />
    <attribute name="port" />
    <attribute name="user" />
    <attribute name="pwd" />
    <attribute name="masterpwd" />
    <attribute name="failonerror" default="true" />
    <attribute name="fileprefix" default="script" />
    <element name="args" implicit="yes" optional="yes" />
    <sequential>
      <create.pwd.file pwd="@{pwd}" masterpwd="@{masterpwd}" property="temp.pwd.file" fileprefix="@{fileprefix}" />
      <echo message="asadmin --user @{user} --passwordfile ${temp.pwd.file} --port @{port} @{command}" level="info" />
      <exec executable="${glassfish.asadmin.file}" failonerror="@{failonerror}">
        <arg value="--user" />
        <arg value="@{user}" />
        <arg value="--passwordfile" />
        <arg value="${temp.pwd.file}" />
        <arg value="--port" />
        <arg value="@{port}" />
        <arg value="@{command}" />
        <args />
      </exec>
      <!-- <delete file="${temp.pwd.file}" failonerror="false" quiet="true" /> -->
    </sequential>
  </macrodef>

  <macrodef name="asadmin.bes">
    <attribute name="command" />
    <attribute name="failonerror" default="true" />
    <attribute name="port" default="${glassfish.bes.domain.admin.port}" />
    <attribute name="user" default="${glassfish.bes.domain.admin.user}" />
    <attribute name="pwd" default="${glassfish.bes.domain.admin.pwd}" />
    <attribute name="masterpwd" default="${glassfish.bes.domain.master.pwd}" />
    <element name="args" implicit="yes" optional="yes" />
    <sequential>
      <asadmin failonerror="@{failonerror}" command="@{command}" port="@{port}" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}">
        <args />
      </asadmin>
    </sequential>
  </macrodef>

  <macrodef name="asadmin.master">
    <attribute name="command" />
    <attribute name="failonerror" default="true" />
    <element name="args" implicit="yes" optional="yes" />
    <sequential>
      <asadmin failonerror="@{failonerror}" command="@{command}" port="${glassfish.master.domain.port}" user="${glassfish.master.domain.admin.user.name}" pwd="${glassfish.master.domain.admin.user.pwd}" masterpwd="${glassfish.master.domain.admin.master.pwd}">
        <args />
      </asadmin>
    </sequential>
  </macrodef>

  <macrodef name="asadmin_noport">
    <attribute name="command" />
    <attribute name="user" default="${defaultuser}" />
    <attribute name="pwd" default="${defaultpwd}" />
    <attribute name="masterpwd" default="${defaultmasterpwd}" />
    <attribute name="failonerror" default="true" />
    <attribute name="fileprefix" default="script" />
    <element name="args" implicit="yes" optional="yes" />
    <sequential>
      <create.pwd.file pwd="@{pwd}" masterpwd="@{masterpwd}" property="temp.pwd.file" fileprefix="@{fileprefix}" />
      <echo message="asadmin --user @{user} --passwordfile ${temp.pwd.file} @{command}" level="info" />
      <exec executable="${glassfish.asadmin.file}" failonerror="@{failonerror}">
        <arg value="--user" />
        <arg value="@{user}" />
        <arg value="--passwordfile" />
        <arg value="${temp.pwd.file}" />
        <arg value="@{command}" />
        <args />
      </exec>
      <!-- <delete file="${temp.pwd.file}" failonerror="false" quiet="true" /> -->
    </sequential>
  </macrodef>

  <macrodef name="startDomain">
    <attribute name="domain" />
    <attribute name="host" default="localhost" />
    <attribute name="user" default="${defaultuser}" />
    <attribute name="pwd" default="${defaultpwd}" />
    <attribute name="masterpwd" default="${defaultmasterpwd}" />
    <attribute name="port" default="${defaultport}" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <parallel>
        <daemons>
          <startDomainWithoutChecks domain="@{domain}" port="@{port}" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}" />
        </daemons>
      </parallel>
      <echo message="Check whether domain @{domain} starts..." />
      <sleep seconds="1" description="Sleep a second before checking whether domain @{domain} starts" />
      <waitfor maxwait="${glassfish.domain.start.maxWaitSeconds}" maxwaitunit="second" checkevery="1" checkeveryunit="second" timeoutproperty="domainNotStarting">
        <socket server="@{host}" port="@{port}" />
      </waitfor>
      <echo message="Check whether domain starts is finished!" />
      <antcall target="startDomainViaTarget">
        <param name="domainToStart" value="@{domain}" />
        <param name="portToStart" value="@{port}" />
        <param name="user" value="@{user}" />
        <param name="pwd" value="@{pwd}" />
        <param name="masterpwd" value="@{masterpwd}" />
      </antcall>
      <waitForRunningDomain host="@{host}" port="@{port}" user="@{user}" pwd="@{pwd}" />
    </sequential>
  </macrodef>

  <target name="startDomainViaTarget" if="domainNotStarting">
    <echo message="Start domain again because it seems domain ${domainToStart} is not starting." />
    <startDomainWithoutChecks domain="${domainToStart}" port="${portToStart}" user="${user}" pwd="${pwd}" masterpwd="${masterpwd}" />
  </target>

  <!-- Used by startDomainWithoutChecks target. It starts the domain only without any running checks -->
  <macrodef name="startDomainWithoutChecks">
    <attribute name="domain" />
    <attribute name="host" default="localhost" />
    <attribute name="user" default="${defaultuser}" />
    <attribute name="pwd" default="${defaultpwd}" />
    <attribute name="masterpwd" default="${defaultmasterpwd}" />
    <attribute name="port" default="${defaultport}" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <parallel>
        <daemons>
          <asadmin_noport command="start-domain" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}" failonerror="@{failonerror}">
            <arg value="@{domain}" />
          </asadmin_noport>
        </daemons>
      </parallel>
    </sequential>
  </macrodef>

  <macrodef name="waitForRunningDomain">
    <attribute name="host" default="localhost" />
    <attribute name="port" />
    <attribute name="user" default="${defaultuser}" />
    <attribute name="pwd" default="${defaultpwd}" />
    <attribute name="maxWaitSeconds" default="${glassfish.domain.start.maxWaitSeconds}" />
    <sequential>
      <!-- short sleep for sureness -->
      <sleep seconds="5" />
      <echo message="WAITING for running domain: @{host}:@{port} max. @{maxWaitSeconds} seconds." />
      <!-- socket must be there -->
      <waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
        <socket server="@{host}" port="@{port}" />
      </waitfor>
      <echo message="... domain readiness check: step 1/7 successful -> socket is running!" />
      <!-- version page of asadmin webconsole must be present -->
      <waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
        <http url="http://@{host}:@{port}/__asadmin/version" errorsBeginAt="404" />
      </waitfor>
      <echo message="... domain readiness check: step 2/7 successful -> domain version page present!" />
      <!-- locations page of asadmin webconsole must be present -->
      <waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
        <http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="404" />
      </waitfor>
      <echo message="... domain readiness check: step 3/7 successful -> domain location page present!" />
      <!-- analyse location page of asadmin webconsole: No failure command 'V3 cannot process' should be displayed-->
      <waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
        <not>
          <resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="V3 cannot process" />
        </not>
      </waitfor>
      <echo message="... domain readiness check: step 4/7 successful -> domain location page informs readiness!" />
      <waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
        <or>
          <!-- the glassfish admin already logged in via HTTP BASIC authentication -->
          <and>
            <http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="400" />
            <resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
          </and>
          <!-- the glassfish admin is not logged in. Login screen is displayed. -->
          <and>
            <not>
              <resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
            </not>
            <http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="402" />
          </and>
        </or>
      </waitfor>
      <echo message="... domain readiness check: step 5/7 successful -> domain location page informs readiness!" />
      <!-- if the glassfish admin not logged in via HTTP BASIC authenticatin, above check will fail. Followings are to ensure login. -->
      <tempfile property="temp.http.get.file.name" destdir="${java.io.tmpdir}/BES" prefix="httpget" suffix=".txt" deleteonexit="true" />
      <get src="http://@{host}:@{port}/__asadmin/__locations" dest="${temp.http.get.file.name}" username="@{user}" password="@{pwd}" verbose="true" ignoreerrors="true" />
      <!-- Sometimes, it is not ready to login. Therefore, login once more. -->
      <tempfile property="temp2.http.get.file.name" destdir="${java.io.tmpdir}/BES" prefix="httpget" suffix=".txt" deleteonexit="true" />
      <get src="http://@{host}:@{port}/__asadmin/__locations" dest="${temp2.http.get.file.name}" username="@{user}" password="@{pwd}" verbose="true" ignoreerrors="true" />
      <echo message="... domain readiness check: step 6/7 successful -> domain location page informs readiness!" />
      <waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
        <or>
          <!-- the glassfish admin already logged in via HTTP BASIC authentication -->
          <and>
            <http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="400" />
            <resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
          </and>
          <!-- the glassfish admin is not logged in. Login screen is displayed. -->
          <and>
            <not>
              <resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
            </not>
            <http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="402" />
          </and>
        </or>
      </waitfor>
      <echo message="DOMAIN READY (step 7/7 successful)!" />
      <delete file="${temp.http.get.file.name}" failonerror="false" verbose="false" />
      <delete file="${temp2.http.get.file.name}" failonerror="false" verbose="false" />
      <!-- short sleep for sureness -->
      <sleep seconds="5" />
    </sequential>
  </macrodef>

  <macrodef name="createDomainWithAdminPort">
    <attribute name="domain" />
    <attribute name="adminport" default="${defaultport}" />
    <attribute name="user" default="${defaultuser}" />
    <attribute name="pwd" default="${defaultpwd}" />
    <attribute name="masterpwd" default="${defaultmasterpwd}" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <asadmin_noport command="create-domain" failonerror="@{failonerror}" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}">
        <arg value="--adminport" />
        <arg value="@{adminport}" />
        <arg value="--savemasterpassword=true" />
        <arg value="@{domain}" />
      </asadmin_noport>
      <!-- <signcertificate keystore="${glassfish.bes.domain.dir}/config/keystore.jks" />
      <importrootca keystore="${glassfish.bes.domain.dir}/config/cacerts.jks" /> -->
    </sequential>
  </macrodef>

  <macrodef name="createDomainWithPortbase">
    <attribute name="domain" />
    <attribute name="portbase" />
    <attribute name="user" default="${defaultuser}" />
    <attribute name="pwd" default="${defaultpwd}" />
    <attribute name="masterpwd" default="${defaultmasterpwd}" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <asadmin_noport command="create-domain" failonerror="@{failonerror}" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}">
        <arg value="--portbase" />
        <arg value="@{portbase}" />
        <arg value="--savemasterpassword=true" />
        <arg value="@{domain}" />
      </asadmin_noport>
      <!-- <signcertificate keystore="${glassfish.bes.domain.dir}/config/keystore.jks" />
      <importrootca keystore="${glassfish.bes.domain.dir}/config/cacerts.jks" /> -->
    </sequential>
  </macrodef>

  <macrodef name="deleteDomain">
    <attribute name="domain" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <asadmin_noauth command="delete-domain" failonerror="@{failonerror}">
        <arg value="@{domain}" />
      </asadmin_noauth>
    </sequential>
  </macrodef>

  <macrodef name="stopDomain">
    <attribute name="domain" />
    <attribute name="failonerror" default="true" />
    <attribute name="waitSeconds" default="${glassfish.domain.stop.waitSeconds}" />
    <sequential>
      <echo message="Wait for @{waitSeconds} seconds to stop the domain." />
      <asadmin_noauth command="stop-domain" failonerror="@{failonerror}">
        <arg value="@{domain}" />
      </asadmin_noauth>
      <!-- short sleep for sureness -->
      <sleep seconds="@{waitSeconds}" />
    </sequential>
  </macrodef>

  <macrodef name="startNodeAgentWithSync">
    <attribute name="nodeAgent" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <asadmin_noport command="start-node-agent" failonerror="@{failonerror}">
        <arg value="--syncinstances=true" />
        <arg value="@{nodeAgent}" />
      </asadmin_noport>
    </sequential>
  </macrodef>

  <macrodef name="startNodeAgent">
    <attribute name="nodeagent" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <asadmin_noport command="start-node-agent" failonerror="@{failonerror}">
        <arg value="@{nodeAgent}" />
      </asadmin_noport>
    </sequential>
  </macrodef>

  <macrodef name="startNodeAgentWait">
    <attribute name="nodeagent" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <parallel>
        <daemons>
          <asadmin_noport command="start-node-agent" failonerror="@{failonerror}">
            <arg value="@{nodeAgent}" />
          </asadmin_noport>
        </daemons>
      </parallel>
      <sleep seconds="120" />
    </sequential>
  </macrodef>

  <macrodef name="startNodeAgentWithSyncWait">
    <attribute name="nodeAgent" />
    <attribute name="failonerror" default="true" />
    <sequential>
      <parallel>
        <daemons>
          <asadmin_noport command="start-node-agent" failonerror="@{failonerror}">
            <arg value="--syncinstances=true" />
            <arg value="@{nodeAgent}" />
          </asadmin_noport>
        </daemons>
      </parallel>
      <sleep seconds="180" />
    </sequential>
  </macrodef>

  <!-- db.properties -->
  <macrodef name="dbProperties">
    <sequential>
      <condition property="db.user.name" value="${db.user}">
        <isset property="db.user" />
      </condition>
      <condition property="db.user.pwd" value="${db.pwd}">
        <isset property="db.pwd" />
      </condition>
      <condition property="db.name" value="${db.name}">
        <isset property="db.name" />
      </condition>
      <condition property="db.host" value="${db.host}">
        <isset property="db.host" />
      </condition>
      <condition property="db.port" value="${db.port}">
        <isset property="db.port" />
      </condition>
      <condition property="db.url" value="${db.url}">
        <isset property="db.url" />
      </condition>
      <condition property="db.driver.class" value="${db.driver.class}">
        <isset property="db.driver.class" />
      </condition>
      <property name="db.schema" value="${db.user.name}" />
    </sequential>
  </macrodef>

  <macrodef name="dbJMSProperties">
    <sequential>
      <property name="db.jms.name" value="bssjms" />
      <property name="db.jms.user" value="jmsuser" />
      <property name="db.jms.pwd" value="${db.jms.user}" />
      <property name="db.jms.schema" value="${db.jms.user}" />
    </sequential>
  </macrodef>

  <macrodef name="echoDbProperties">
    <sequential>
      <echo message="--- db properties ---" />
      <echo message="db.host:       ${db.host}" />
      <echo message="db.port:       ${db.port}" />
      <echo message="db.user.name:  ${db.user.name}" />
      <echo message="db.user.pwd:   ${db.user.pwd}" />
      <echo message="db.name:       ${db.name}" />
    </sequential>
  </macrodef>

  <macrodef name="verifyDbProperties">
    <sequential>
      <condition property="db.properties.complete">
        <and>
          <isset property="db.host" />
          <isset property="db.port" />
          <isset property="db.user.name" />
          <isset property="db.user.pwd" />
          <isset property="db.name" />
        </and>
      </condition>
    </sequential>
  </macrodef>

  <macrodef name="verifyDbProperties_Master">
    <sequential>
      <condition property="db.properties.complete">
        <and>
          <isset property="db.host" />
          <isset property="db.port" />
          <isset property="db.user.name" />
          <isset property="db.user.pwd" />
          <isset property="db.name" />
        </and>
      </condition>
    </sequential>
  </macrodef>


  <!-- mail properties-->
  <macrodef name="mailProperties">
    <sequential>
      <condition property="mail.host" value="${MAIL_HOST}">
        <isset property="MAIL_HOST" />
      </condition>
      <condition property="mail.response.address" value="${MAIL_RESPONSE_ADDRESS}">
        <isset property="MAIL_RESPONSE_ADDRESS" />
      </condition>
      <condition property="mail.port" value="${MAIL_PORT}">
        <isset property="MAIL_PORT" />
      </condition>
      <condition property="mail.use.authentication" value="${MAIL_USE_AUTHENTICATION}">
        <isset property="MAIL_USE_AUTHENTICATION" />
      </condition>
      <condition property="mail.user" value="${MAIL_USER}">
        <isset property="MAIL_USER" />
      </condition>
      <condition property="mail.pwd" value="${MAIL_PWD}">
        <isset property="MAIL_PWD" />
      </condition>
      <condition property="mail.timeout" value="${MAIL_TIMEOUT}">
        <isset property="MAIL_TIMEOUT" />
      </condition>
      <condition property="mail.connectiontimeout" value="${MAIL_CONNECTIONTIMEOUT}">
        <isset property="MAIL_CONNECTIONTIMEOUT" />
      </condition>
    </sequential>
  </macrodef>

  <macrodef name="echoMailProperties">
    <sequential>
      <echo message="--- mail properties ---" />
      <echo message="mail.host:               ${mail.host}" />
      <echo message="mail.response.address:   ${mail.response.address}" />
      <echo message="mail.port:               ${mail.port}" />
      <echo message="mail.use.authentication: ${mail.use.authentication}" />
      <echo message="mail.user:               ${mail.user}" />
      <echo message="mail.pwd:                ${mail.pwd}" />
    </sequential>
  </macrodef>

  <macrodef name="verifyMailProperties">
    <sequential>
      <condition property="mail.properties.complete">
        <and>
          <isset property="mail.host" />
          <isset property="mail.port" />
          <isset property="mail.use.authentication" />
          <isset property="mail.user" />
          <isset property="mail.pwd" />
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- JAR files -->
  <macrodef name="jarProperties">
    <sequential>
      <!-- jdbc driver -->
      <property name="jdbc.driver.jar.name" value="${JDBC_DRIVER_JAR_NAME}" />
      <property name="jdbc.driver.jar.path" value="${working.dir}/lib" />
      <property name="jdbc.driver.jar" value="${jdbc.driver.jar.path}/${jdbc.driver.jar.name}" />
      <!-- bss security jar -->
      <property name="bss.security.jar.name" value="oscm-security.jar" />
      <property name="bss.security.jar" value="${jdbc.driver.jar.path}/${bss.security.jar.name}" />
    </sequential>
  </macrodef>

  <macrodef name="echoJarProperties">
    <sequential>
      <echo message="--- jar properties ---" />
      <echo message="jdbc.driver.jar.name:  ${jdbc.driver.jar.name}" />
    </sequential>
  </macrodef>

  <macrodef name="verifyJarProperties">
    <sequential>
      <condition property="jar.properties.complete">
        <isset property="jdbc.driver.jar.name" />
      </condition>
    </sequential>
  </macrodef>

  <macrodef name="verifyJarProperties_Master">
    <sequential>
      <condition property="jar.properties.complete">
        <isset property="jdbc.driver.jar.name" />
      </condition>
    </sequential>
  </macrodef>

  <!-- BES domain properties -->
  <macrodef name="besDomainProperties">
    <sequential>
      <property name="glassfish.domain.dir" value="${glassfish.home}/glassfish/domains/${glassfish.bes.domain.name}" />
      <property name="glassfish.domain.lib.dir" value="${com.sun.aas.instanceRoot}/lib" />

      <!-- MQ broker properties for domain -->
      <property name="glassfish.broker.base.dir" value="${glassfish.domain.dir}/imq" />
      <property name="glassfish.broker.dir" value="${glassfish.broker.base.dir}/instances/imqbroker" />

      <!-- classpath suffix for domain -->
      <property name="glassfish.classpath" value="${glassfish.domain.lib.dir}/${bss.security.jar.name}${path.separator}${com.sun.aas.installRoot}/lib/appserv-admin.jar${path.separator}${glassfish.domain.lib.dir}/${jdbc.driver.jar.name}" />

      <!-- jms user for bssjms-->
      <property name="jms.user.name" value="jmsuser" />
      <property name="jms.user.pwd" value="jmsuser" />

    </sequential>
  </macrodef>

  <macrodef name="echoBesDomainProperties">
    <sequential>
      <echo message="--- BES domain properties ---" />
      <echo message="glassfish.home:                    ${glassfish.home}" />
      <echo message="glassfish.bes.domain.admin.port:   ${glassfish.bes.domain.admin.port}" />
      <echo message="glassfish.bes.domain.portbase:     ${glassfish.bes.domain.portbase}" />
      <echo message="glassfish.bes.domain.name:         ${glassfish.bes.domain.name}" />
      <echo message="glassfish.bes.domain.admin.user:   ${glassfish.bes.domain.admin.user}" />
      <echo message="glassfish.bes.domain.admin.pwd:    ${glassfish.bes.domain.admin.pwd}" />
      <echo message="glassfish.bes.domain.master.pwd:  ${glassfish.bes.domain.master.pwd}" />
      <echo message="glassfish.broker.dir:        ${glassfish.broker.dir}" />
      <echo message="glassfish.WS_PORT:           ${glassfish.WS_PORT}" />
      <echo message="jms.user.name:               ${jms.user.name}" />
      <echo message="jms.user.pwd:                ${jms.user.pwd}" />
    </sequential>
  </macrodef>

  <macrodef name="verifyBesDomainProperties">
    <sequential>
      <condition property="domain.properties.complete">
        <and>
          <isset property="glassfish.home" />
          <isset property="glassfish.bes.domain.admin.port" />
          <isset property="glassfish.bes.domain.portbase" />
          <isset property="glassfish.bes.domain.name" />
          <isset property="glassfish.bes.domain.admin.user" />
          <isset property="glassfish.bes.domain.admin.pwd" />
          <isset property="glassfish.bes.domain.master.pwd" />
          <isset property="glassfish.broker.dir" />
          <isset property="glassfish.WS_PORT" />
          <isset property="jms.user.name" />
          <isset property="jms.user.pwd" />
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- domain properties (hibernate master indexer) -->
  <macrodef name="masterDomainProperties">
    <sequential>
      <property name="glassfish.domain.master.dir" value="${glassfish.home}/glassfish/domains/${glassfish.master.domain.name}" />

      <!-- MQ broker properties for master index domain -->
      <property name="glassfish.domain.master.broker.base.dir" value="${glassfish.domain.master.dir}/imq" />
      <property name="glassfish.domain.master.broker.dir" value="${glassfish.domain.master.broker.base.dir}/instances/imqbroker" />

      <property name="glassfish.domain.master.dir" value="${glassfish.home}/glassfish/domains/${glassfish.bes.domain.name}" />
      <property name="glassfish.domain.master.lib.dir" value="${com.sun.aas.instanceRoot}/lib" />

      <!-- classpath suffix for master index domain -->
      <property name="glassfish.domain.master.classpath" value="${glassfish.domain.master.lib.dir}/${jdbc.driver.jar.name}" />

      <!-- jms user for bssjms-->
      <property name="master.jms.user.name" value="jmsuser" />
      <property name="master.jms.user.pwd" value="jmsuser" />

    </sequential>
  </macrodef>

  <macrodef name="echoMasterDomainProperties">
    <sequential>
      <echo message="--- Master indexer domain properties ---" />
      <echo message="glassfish.home:                           ${glassfish.home}" />
      <echo message="glassfish.master.domain.host:             ${glassfish.master.domain.host}" />
      <echo message="glassfish.master.domain.jms.port:         ${glassfish.master.domain.jms.port}" />
      <echo message="glassfish.master.domain.portbase:         ${glassfish.master.domain.portbase}" />
      <echo message="glassfish.master.domain.port:             ${glassfish.master.domain.port}" />
      <echo message="glassfish.master.domain.name:             ${glassfish.master.domain.name}" />
      <echo message="glassfish.master.domain.admin.user.name:  ${glassfish.master.domain.admin.user.name}" />
      <echo message="glassfish.master.domain.admin.user.pwd:   ${glassfish.master.domain.admin.user.pwd}" />
      <echo message="glassfish.master.domain.admin.master.pwd: ${glassfish.master.domain.admin.master.pwd}" />
      <echo message="glassfish.domain.master.broker.dir:       ${glassfish.domain.master.broker.dir}" />
      <echo message="master.slave.shared.hibernate.search.sourceBase:  ${master.slave.shared.hibernate.search.sourceBase}" />
      <echo message="jms.user.name:               ${jms.user.name}" />
      <echo message="jms.user.pwd:                ${jms.user.pwd}" />
    </sequential>
  </macrodef>

  <macrodef name="verifyMasterDomainProperties">
    <sequential>
      <condition property="domain.master.properties.complete">
        <and>
          <isset property="glassfish.home" />
          <isset property="glassfish.master.domain.host" />
          <isset property="glassfish.master.domain.portbase" />
          <isset property="glassfish.master.domain.port" />
          <isset property="glassfish.master.domain.jms.port" />
          <isset property="glassfish.master.domain.name" />
          <isset property="glassfish.master.domain.admin.user.name" />
          <isset property="glassfish.master.domain.admin.user.pwd" />
          <isset property="glassfish.master.domain.admin.master.pwd" />
          <isset property="glassfish.domain.master.broker.dir" />
          <isset property="master.slave.shared.hibernate.search.sourceBase" />
          <isset property="jms.user.name" />
          <isset property="jms.user.pwd" />
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- BES cluster properties -->
  <macrodef name="clusterProperties">
    <sequential>
      <property name="glassfish.nodeagents.dir" value="${glassfish.home}/nodeagents" />
      <property name="glassfish.node.instance.dir" value="${glassfish.nodeagents.dir}/${glassfish.node.agent.name}/${glassfish.node.instance.name}" />
      <property name="glassfish.broker.node.base.dir" value="${glassfish.nodeagents.dir}/${glassfish.node.agent.name}/${glassfish.node.instance.name}/imq" />
      <property name="glassfish.broker.node.instances.dir" value="${glassfish.broker.node.base.dir}/instances" />
      <property name="glassfish.node.broker.instance" value="${glassfish.cluster.name}${glassfish.node.instance.name}" />
      <property name="target.name" value="${glassfish.cluster.name}" />
      <condition property="glassfish.broker.cluster.url" value="file:/${glassfish.domain.dir}/config/cluster.properties" else="file:${glassfish.domain.dir}/config/cluster.properties">
        <os family="windows" />
      </condition>
    </sequential>
  </macrodef>

  <macrodef name="echoClusterProperties">
    <sequential>
      <echo message="--- cluster properties ---" />
      <echo message="glassfish.cluster.name:              ${glassfish.cluster.name}" />
      <echo message="glassfish.node.agent.name:           ${glassfish.node.agent.name}" />
      <echo message="glassfish.node.instance.name:        ${glassfish.node.instance.name}" />
      <echo message="glassfish.nodeagents.dir:            ${glassfish.nodeagents.dir}" />
      <echo message="glassfish.node.instance.dir:         ${glassfish.node.instance.dir}" />
      <echo message="glassfish.broker.node.base.dir:      ${glassfish.broker.node.base.dir}" />
      <echo message="glassfish.broker.node.instances.dir: ${glassfish.broker.node.instances.dir}" />
      <echo message="glassfish.node.broker.instance:      ${glassfish.node.broker.instance}" />
      <echo message="glassfish.broker.cluster.url:        ${glassfish.broker.cluster.url}" />
      <echo message="glassfish.cluster.JMS_PROVIDER_PORT: ${glassfish.cluster.JMS_PROVIDER_PORT}" />
      <echo message="glassfish.cluster.JMX_SYSTEM_CONNECTOR_PORT: ${glassfish.cluster.JMX_SYSTEM_CONNECTOR_PORT}" />
      <echo message="glassfish.cluster.IIOP_LISTENER_PORT:        ${glassfish.cluster.IIOP_LISTENER_PORT}" />
      <echo message="glassfish.cluster.IIOP_SSL_MUTUALAUTH_PORT:  ${glassfish.cluster.IIOP_SSL_MUTUALAUTH_PORT}" />
      <echo message="glassfish.cluster.HTTP_LISTENER_PORT:     ${glassfish.cluster.HTTP_LISTENER_PORT}" />
      <echo message="glassfish.cluster.HTTP_SSL_LISTENER_PORT: ${glassfish.cluster.HTTP_SSL_LISTENER_PORT}" />
      <echo message="glassfish.WS_PORT:                        ${glassfish.WS_PORT}" />
      <!-- <echo message="glassfish.HIBERNATE_SLAVE_REFRESH_SEC:    ${glassfish.HIBERNATE_SLAVE_REFRESH_SEC}" /> -->
    </sequential>
  </macrodef>

  <macrodef name="verifyClusterProperties">
    <sequential>
      <condition property="cluster.properties.complete">
        <and>
          <isset property="glassfish.home" />
          <isset property="glassfish.cluster.name" />
          <isset property="glassfish.node.agent.name" />
          <isset property="glassfish.node.instance.name" />
          <isset property="glassfish.nodeagents.dir" />
          <isset property="glassfish.broker.node.base.dir" />
          <isset property="glassfish.broker.node.instances.dir" />
          <isset property="glassfish.node.broker.instance" />
          <isset property="glassfish.broker.cluster.url" />
          <isset property="glassfish.cluster.JMS_PROVIDER_PORT" />
          <isset property="glassfish.cluster.JMX_SYSTEM_CONNECTOR_PORT" />
          <isset property="glassfish.cluster.IIOP_LISTENER_PORT" />
          <isset property="glassfish.cluster.IIOP_SSL_LISTENER_PORT" />
          <isset property="glassfish.cluster.IIOP_SSL_MUTUALAUTH_PORT" />
          <isset property="glassfish.cluster.HTTP_LISTENER_PORT" />
          <isset property="glassfish.cluster.HTTP_SSL_LISTENER_PORT" />
          <isset property="glassfish.WS_PORT" />
          <!-- <isset property="glassfish.HIBERNATE_SLAVE_REFRESH_SEC" /> -->
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- create a timestamp -->
  <macrodef name="timestamp.echo">
    <attribute name="message" />
    <attribute name="level" />
    <sequential>
      <tstamp>
        <format property="current.time" pattern="HH:mm:ss.SSSZ" />
      </tstamp>
      <echo message="[${current.time}] @{message}" level="@{level}" />
    </sequential>
  </macrodef>

  <!-- check ant version -->
  <macrodef name="antCheckVersion">
    <attribute name="required" />
    <sequential>
      <fail message="Script requires Ant version @{required}">
        <condition>
          <not>
            <contains string="${ant.version}" substring="@{required}" />
          </not>
        </condition>
      </fail>
    </sequential>
  </macrodef>

</project>