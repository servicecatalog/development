<!-- Copyright FUJITSU LIMITED 2016-->
<project name="Setup Integration Test Environment" default="STANDALONE.setup">

  <!-- Find hostname on Linux and Windows -->
  <property environment="env" />
  <property name="env.HOSTNAME" value="${env.COMPUTERNAME}" />

  <!-- Load Properties -->
  <property name="devruntime.local" value="${basedir}/../../oscm-devruntime/javares/local/${env.HOSTNAME}" />
  <property name="local.properties.file" location="${devruntime.local}/integration.properties" />
  <echo level="info">Loading local properties from ${local.properties.file}</echo>
  <property file="${local.properties.file}" />
  <property name="dbproperties.file" location="${devruntime.local}/db.properties" />
  <echo level="info">Loading local db properties from ${dbproperties.file}</echo>
  <property file="${dbproperties.file}" />
  <property name="build.src.dir" location="${basedir}/../../" />
  <property name="build.result.package.dir" value="${build.src.dir}/oscm-build/result/package" />

  <property name="user" value="admin" />
  <property name="pwd" value="adminadmin" />
  <property name="masterpwd" value="changeit" />
  <!-- domain dirs -->
  <property name="glassfish.bes.domain.dir" location="${glassfish.home}/glassfish/domains/${glassfish.bes.domain.name}" />
  <property name="glassfish.master.domain.dir" location="${glassfish.home}/glassfish/domains/${glassfish.master.domain.name}" />
  <property name="glassfish.example.domain.dir" location="${glassfish.home}/glassfish/domains/${glassfish.example.domain.name}" />

  <!-- working dirs -->
  <property name="macro.dir" location="${basedir}" />
  <property name="work.dir" location="./work" />
  <property name="working.dir" location="work" />
  <property name="config.dir" location="config" />
  <property name="workspace.dir" location="../../" />
  <property name="work.setup.dir" location="${work.dir}/oscm-install-pack" />
  <property name="work.bss.setup.domains.dir" location="${work.setup.dir}/domains" />
  <property name="work.bss.setup.install.dir" location="${work.setup.dir}/install" />
  <property name="import.dir" location="./import" />
  <property name="work.certs.dir" location="${work.dir}/certs" />
  <property name="jacoco.agent.file" location="${build.src.dir}/libraries/jacoco/resources/jacocoagent.jar" />
  <available file="${apache.root.dir}" type="dir" property="apache.present" />

  <property name="example.domain.path" value="${work.bss.setup.domains.dir}/example_domain" />
  <property name="bes.domain.path" value="${work.bss.setup.domains.dir}/bes_domain" />
  <property name="example.domain.app.path" value="${example.domain.path}/applications" />
  <property name="bes.domain.app.path" value="${bes.domain.path}/applications" />
  <!-- setup script -->
  <property name="setup.script" value="${work.bss.setup.install.dir}/build-glassfish.xml" />
  <property name="db.script" value="${work.bss.setup.install.dir}/build-db.xml" />
  <property name="working.dir" value="${work.bss.setup.dir}" />

  <import file="${macro.dir}/macrodefs_integration.xml" />
  <import file="${work.bss.setup.install.dir}/macrodefs-glassfish.xml" />

  <taskdef file="${workspace.dir}/oscm-build-antextensions/javares/org/oscm/build/ant/tasks.xml">
    <classpath>
      <fileset dir="${build.src.dir}/oscm-build/javalib" includes="*.jar" />
      <fileset dir="${build.src.dir}/libraries/bouncycastle/javalib" includes="*.jar" />
    </classpath>
  </taskdef>

  <macrodef name="importcertificate">
    <attribute name="srckeystore" />
    <attribute name="srcalias" />
    <attribute name="destkeystore" />
    <attribute name="destalias" />
    <sequential>
      <exec executable="${keytool}" failonerror="true">
        <arg value="-exportcert" />
        <arg value="-alias" />
        <arg value="@{srcalias}" />
        <arg value="-keystore" />
        <arg value="@{srckeystore}" />
        <arg value="-storepass" />
        <arg value="changeit" />
        <arg value="-file" />
        <arg value="work/temp_importcertificate.csr" />
      </exec>

      <exec executable="${keytool}" failonerror="true">
        <arg value="-importcert" />
        <arg value="-alias" />
        <arg value="@{destalias}" />
        <arg value="-keystore" />
        <arg value="@{destkeystore}" />
        <arg value="-storepass" />
        <arg value="changeit" />
        <arg value="-file" />
        <arg value="work/temp_importcertificate.csr" />
      </exec>

      <delete file="work/temp_importcertificate.csr" failonerror="false" />
    </sequential>
  </macrodef>

  <macrodef name="deletealias">
    <attribute name="keystore" />
    <attribute name="alias" />
    <sequential>
      <exec executable="${keytool}" failonerror="true">
        <arg value="-delete" />
        <arg value="-alias" />
        <arg value="@{alias}" />
        <arg value="-keystore" />
        <arg value="@{keystore}" />
        <arg value="-storepass" />
        <arg value="changeit" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="importrootca">
    <attribute name="keystore" />
    <sequential>
      <exec executable="${keytool}" failonerror="true">
        <arg value="-import" />
        <arg value="-trustcacerts" />
        <arg value="-noprompt" />
        <arg value="-alias" />
        <arg value="besrootca" />
        <arg value="-keystore" />
        <arg value="@{keystore}" />
        <arg value="-storepass" />
        <arg value="changeit" />
        <arg value="-file" />
        <arg value="${config.dir}/rootca.crt" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="signcertificate">
    <attribute name="keystore" />
    <sequential>
      <delete file="${working.dir}/temp.csr" />
      <delete file="${working.dir}/temp.crt" />

      <exec executable="${keytool}" failonerror="true">
        <arg value="-certreq" />
        <arg value="-alias" />
        <arg value="s1as" />
        <arg value="-keystore" />
        <arg value="@{keystore}" />
        <arg value="-storepass" />
        <arg value="changeit" />
        <arg value="-file" />
        <arg value="${working.dir}/temp.csr" />
      </exec>

      <sign csr="${working.dir}/temp.csr" destfile="${working.dir}/temp.crt" keystore="${config.dir}/rootca.jks" alias="rootca" password="changeit" />

      <exec executable="${keytool}" failonerror="true">
        <arg value="-import" />
        <arg value="-noprompt" />
        <arg value="-alias" />
        <arg value="s1as" />
        <arg value="-keystore" />
        <arg value="@{keystore}" />
        <arg value="-storepass" />
        <arg value="changeit" />
        <arg value="-file" />
        <arg value="${working.dir}/temp.crt" />
      </exec>

    </sequential>
  </macrodef>

  <target name="STANDALONE.setup">
    <antcall target="STANDALONE.setupWithoutCoverage" />
    <antcall target="enableCoverage">
      <param name="glassfish.target.bes" value="server" />
    </antcall>
  </target>

  <target name="STANDALONE.setupWithoutCoverage">
    <antcall target="askBefore" />
    <antcall target="deleteDomains" />
    <antcall target="initDB" />
    <antcall target="besSetupAndDeploy_Standalone" />
    <antcall target="exampleSetupAndDeploy" />
    <sleep seconds="90" />
  </target>

  <target name="deleteDomains">
    <glassfishProperties filepath="${bes.domain.path}" />
    <stopDomain domain="${glassfish.bes.domain.name}" failonerror="false" />
    <stopDomain domain="${glassfish.master.domain.name}" failonerror="false" />
    <stopDomain domain="${glassfish.example.domain.name}" failonerror="false" />
    <deleteDomain domain="${glassfish.bes.domain.name}" failonerror="false" />
    <deleteDomain domain="${glassfish.master.domain.name}" failonerror="false" />
    <deleteDomain domain="${glassfish.example.domain.name}" failonerror="false" />
    <antcall target="deleteIndex" />
  </target>

  <target name="deleteIndex">
    <delete dir="${master.slave.shared.hibernate.search.sourceBase}" failonerror="false" quiet="true" />
  </target>


  <target name="initDB">
    <ant antfile="${db.script}" target="DROP.dbsAndUsers">
      <property name="database.interpreter" value="${dbinterpreter}" />
      <property name="basedir" value="${work.bss.setup.install.dir}" />
    </ant>    
    <ant antfile="${db.script}" target="initDB">
      <property name="database.interpreter" value="${dbinterpreter}" />
      <property name="basedir" value="${work.bss.setup.install.dir}" />
    </ant>
  </target>

  <target name="besSetupAndDeploy_Standalone">
    <glassfishProperties filepath="${bes.domain.path}" />
    <ant antfile="${setup.script}" target="SETUP">
      <property name="basedir" value="${work.bss.setup.install.dir}" />
    </ant>
    <antcall target="configureBesStandalone" />
    <stopDomain domain="${glassfish.bes.domain.name}" />
    <startDomain domain="${glassfish.bes.domain.name}" port="${glassfish.bes.domain.admin.port}" />
  </target>

  <target name="configureBesStandalone">
    <antcall target="_configureMasterIndexer" />
    <antcall target="_configureBesStandalone" />
  </target>

  <target name="_configureMasterIndexer">
    <antcall target="copyCertToMasterDomain" />
  </target>

  <target name="copyCertToMasterDomain">
    <signcertificate keystore="${glassfish.master.domain.dir}/config/keystore.jks" />
    <importrootca keystore="${glassfish.master.domain.dir}/config/cacerts.jks" />
    <!-- <copy file="${build.src.dir}/oscm-integrationtests-setup/resources/cert/cakey.der" todir="${glassfish.master.domain.dir}/config" />
    <copy file="${build.src.dir}/oscm-integrationtests-setup/resources/cert/cacert.der" todir="${glassfish.master.domain.dir}/config" /> -->
  </target>

  <target name="_configureBesStandalone">
    <antcall target="copyCertToBesDomain" />
    <startDomain domain="${glassfish.bes.domain.name}" port="${glassfish.bes.domain.admin.port}" />
    <!-- Configure Java Debug Port -->
    <asadmin.domain command="set">
      <arg value="server.java-config.debug-enabled=true" />
      <arg value="server.java-config.debug-options=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${glassfish.bes.DEBUG_PORT}" />
    </asadmin.domain>
    <stopDomain domain="${glassfish.bes.domain.name}" />
    <startDomain domain="${glassfish.bes.domain.name}" port="${glassfish.bes.domain.admin.port}" />
  </target>

  <target name="copyCertToBesDomain">
    <signcertificate keystore="${glassfish.bes.domain.dir}/config/keystore.jks" />
    <importrootca keystore="${glassfish.bes.domain.dir}/config/cacerts.jks" />
    <!-- <copy file="${build.src.dir}/oscm-integrationtests-setup/resources/cert/cakey.der" todir="${glassfish.bes.domain.dir}/config" />
    <copy file="${build.src.dir}/oscm-integrationtests-setup/resources/cert/cacert.der" todir="${glassfish.bes.domain.dir}/config" /> -->
  </target>

  <target name="enableCoverage">
    <!-- Add Code Coverage Agent -->
    <glassfishProperties filepath="${bes.domain.path}" />
    <copy file="${jacoco.agent.file}" todir="${glassfish.bes.domain.dir}/config" />
    <asadmin.domain command="create-jvm-options">
      <arg value="--target" />
      <arg value="${glassfish.target.bes}" />
      <arg value="-javaagent\:jacocoagent.jar=includes=org.oscm.*,output=tcpserver,port=${glassfish.bes.domain.jacoco.port}" />
    </asadmin.domain>

    <!-- re-start server -->
    <stopDomain domain="${glassfish.bes.domain.name}" />
    <startDomain domain="${glassfish.bes.domain.name}" port="${glassfish.bes.domain.admin.port}" />
  </target>

  <target name="exampleSetupAndDeploy">
    <antcall target="prepareForExampleDomain" />
    <ant antfile="${setup.script}" target="SETUP">
      <property name="basedir" value="${work.bss.setup.install.dir}" />
      <property name="domain.setup" value="example_domain" />
    </ant>
    <glassfishProperties filepath="${example.domain.path}" />
    <antcall target="copyCertToExampleDomain" />
    <stopDomain domain="${glassfish.example.domain.name}" />
    <startDomain domain="${glassfish.example.domain.name}" port="${glassfish.example.domain.admin.port}" />
  </target>

  <target name="copyCertToExampleDomain">
    <signcertificate keystore="${glassfish.example.domain.dir}/config/keystore.jks" />
    <importrootca keystore="${glassfish.example.domain.dir}/config/cacerts.jks" />
    <!-- <copy file="${build.src.dir}/oscm-integrationtests-setup/resources/cert/cakey.der" todir="${glassfish.example.domain.dir}/config" />
    <copy file="${build.src.dir}/oscm-integrationtests-setup/resources/cert/cacert.der" todir="${glassfish.example.domain.dir}/config" /> -->
    <importcertificate srckeystore="${glassfish.bes.domain.dir}/config/keystore.jks" srcalias="s1as" destkeystore="${glassfish.example.domain.dir}/config/cacerts.jks" destalias="integration-bes-s1as" />
  </target>

  <target name="prepareForExampleDomain">
    <copy todir="${example.domain.path}">
      <fileset dir="${build.src.dir}/oscm-installation/domains/example_domain" />
    </copy>
    <antcall target="changePropertiesForExampleDomain" />
    <copy file="${build.result.package.dir}/example-service/example-service.war" todir="${example.domain.app.path}" />
    <copy file="${build.result.package.dir}/oscm-integrationtests-mockproduct/oscm-integrationtests-mockproduct.war" todir="${example.domain.app.path}" />
    <copy file="${build.result.package.dir}/mock-psp-service/mock-psp-service.war" todir="${example.domain.app.path}" />
    <copy file="${build.result.package.dir}/oscm-integrationtests-saml2-sts/oscm-integrationtests-saml2-sts.war" todir="${example.domain.app.path}" />
    <copy file="${build.result.package.dir}/oscm-psp-heidelpay/oscm-psp-heidelpay.war" todir="${example.domain.app.path}" />
    <copy file="${build.result.package.dir}/oscm-integrationtests-parameter-configurator/oscm-parameter-configurator.war" todir="${example.domain.app.path}" />
  	<copy file="${build.result.package.dir}/oscm-file-billing-adapter/oscm-file-adapter.ear" todir="${example.domain.app.path}" />
    <copy file="${build.result.package.dir}/oscm-file-billing-application/oscm-file-billing.war" todir="${example.domain.app.path}" />
    <antcall target="copyMockSTS" />
  </target>

  <target name="copyMockSTS" depends="checkIfDeployNeeded" if="deploy.needed">
    <copy file="${build.result.package.dir}/oscm-integrationtests-saml2-sts/oscm-integrationtests-saml2-sts.war" todir="${example.domain.app.path}" />
  </target>

  <target name="changePropertiesForExampleDomain">
    <propertyfile file="${example.domain.path}/glassfish.properties" comment="glassfish properties">
      <entry key="GLASSFISH_HOME" value="${glassfish.home}" />
      <entry key="glassfish.domain.portadmin" value="${glassfish.example.domain.admin.port}" />
      <entry key="glassfish.domain.portbase" value="${glassfish.example.domain.portbase}" />
      <entry key="glassfish.domain.name" value="${glassfish.example.domain.name}" />
      <entry key="glassfish.domain.admin.user" value="${user}" />
      <entry key="glassfish.domain.admin.pwd" value="${pwd}" />
      <entry key="glassfish.domain.master.pwd" value="${masterpwd}" />
      <entry key="glassfish.domain.remote.jms.host" value="${glassfish.bes.domain.host}" />
      <entry key="glassfish.domain.remote.jms.port" value="${glassfish.bes.domain.jms.port}" />
      <entry key="glassfish.domain.start.maxWaitSeconds" value="${glassfish.domain.start.maxWaitSeconds}" />
      <entry key="glassfish.domain.stop.waitSeconds" value="${glassfish.domain.stop.waitSeconds}" />

    </propertyfile>

  </target>

  <target name="askBefore">
    <!--<input message="If existing, the domains ${glassfish.bes.domain.name}, ${glassfish.example.domain.name} and all data in the database bss will be deleted! Do you want to continue?" defaultvalue="yes" />-->
  </target>

  <target name="checkIfDeployNeeded">
    <property name="configsettings.properties" location="${work.bss.setup.domains.dir}/bes_domain/configsettings.properties" />
    <echo level="info">Loading configsettings from ${configsettings.properties}</echo>
    <property file="${configsettings.properties}" />
    <condition property="deploy.needed">
      <equals arg1="${AUTH_MODE}" arg2="SAML_SP" />
    </condition>
  </target>

  <target name="STANDALONE.prepareSetupWithPreparedGlassfish">
    <antcall target="unzipGFPackage" />
    <antcall target="modifyConfig" />
  </target>

  <target name="unzipGFPackage">
    <fail message="Cannot find glassfish package">
      <condition>
        <not>
          <available file="${GF.package.path}/glassfish3.zip" />
        </not>
      </condition>
    </fail>
    <unzip src="${GF.package.path}/glassfish3.zip" dest="${glassfish.home}/.." />
    <condition property="isUnix" value="true">
      <os family="unix" />
    </condition>
    <antcall target="chmodForGF" />
  </target>

  <target name="chmodForGF" if="isUnix">
    <chmod dir="${glassfish.home}/bin" perm="ugo+x" includes="*" />
    <chmod dir="${glassfish.home}/glassfish/bin" perm="ugo+x" includes="*" />
  </target>

  <target name="modifyConfig">
    <exec executable="hostname" outputproperty="beshostname">
      <arg line="-f" />
    </exec>
    <antcall target="modifyMasterConfig" />
    <antcall target="modifyBesConfig" />
    <antcall target="modifyExampleConfig" />
    <antcall target="replaceCert" />
  </target>

  <target name="replaceCert">
    <signcertificate keystore="${glassfish.master.domain.dir}/config/keystore.jks" />
    <deletealias keystore="${glassfish.master.domain.dir}/config/cacerts.jks" alias="besrootca" />
    <importrootca keystore="${glassfish.master.domain.dir}/config/cacerts.jks" />
    <signcertificate keystore="${glassfish.bes.domain.dir}/config/keystore.jks" />
    <deletealias keystore="${glassfish.bes.domain.dir}/config/cacerts.jks" alias="besrootca" />
    <importrootca keystore="${glassfish.bes.domain.dir}/config/cacerts.jks" />
    <signcertificate keystore="${glassfish.example.domain.dir}/config/keystore.jks" />
    <deletealias keystore="${glassfish.example.domain.dir}/config/cacerts.jks" alias="besrootca" />
    <importrootca keystore="${glassfish.example.domain.dir}/config/cacerts.jks" />
    <deletealias keystore="${glassfish.example.domain.dir}/config/cacerts.jks" alias="integration-bes-s1as" />
    <importcertificate srckeystore="${glassfish.bes.domain.dir}/config/keystore.jks" srcalias="s1as" destkeystore="${glassfish.example.domain.dir}/config/cacerts.jks" destalias="integration-bes-s1as" />
  </target>

  <target name="modifyMasterConfig">
    <modifyGFConfig path="${glassfish.master.domain.dir}/config" />
    <modifyJDBCConfig file="${glassfish.master.domain.dir}/config/domain.xml" />
    <modifyIMQBrokerConfig configfile="${glassfish.master.domain.dir}/imq/instances/imqbroker/props/config.properties" lockfile="${glassfish.master.domain.dir}/imq/instances/imqbroker/lock" />
    <propertyfile file="${glassfish.master.domain.dir}/imq/instances/imqbroker/props/config.properties" comment="broker id">
      <entry key="imq.brokerid" value="brokerid_masterindexer" />
    </propertyfile>
  </target>

  <target name="modifyBesConfig">
    <modifyGFConfig path="${glassfish.bes.domain.dir}/config" />
    <modifyJDBCConfig file="${glassfish.bes.domain.dir}/config/domain.xml" />
    <modifyJMSConfig file="${glassfish.bes.domain.dir}/config/domain.xml" />
    <modifyIMQBrokerConfig configfile="${glassfish.bes.domain.dir}/imq/instances/imqbroker/props/config.properties" lockfile="${glassfish.bes.domain.dir}/imq/instances/imqbroker/lock" />
    <modifyMailConfig file="${glassfish.bes.domain.dir}/config/domain.xml" />
  </target>

  <target name="modifyExampleConfig">
    <modifyGFConfig path="${glassfish.example.domain.dir}/config" />
  </target>

  <macrodef name="modifyIMQBrokerConfig">
    <attribute name="configfile" />
    <attribute name="lockfile" />
    <sequential>
      <copy tofile="@{configfile}" file="${work.bss.setup.dir}/glassfishJMSBroker.properties" overwrite="true" />
      <replaceregexp file="@{lockfile}" match="(imqbroker\:)(.*)(\:)" replace="\1${beshostname}\3" />
    </sequential>
  </macrodef>

  <macrodef name="modifyGFConfig">
    <attribute name="path" />
    <sequential>
      <replaceregexp file="@{path}/domain.xml" match="(Dhibernate.search.default.sourceBase=)(.*)&lt;" replace="\1${master.slave.shared.hibernate.search.sourceBase}&lt;" />
      <replaceregexp file="@{path}/domain.xml" match="CN=linux\-pnvf\.site" replace="CN=${beshostname}" flags="g" />
      <replaceregexp file="@{path}/domain.xml.bak" match="CN=linux\-pnvf\.site" replace="CN=${beshostname}" flags="g" />
      <replaceregexp file="@{path}/sun-acc.xml" match="(target\-server\sname=&quot;)(.*)(&quot;\saddress)" replace="\1${beshostname}\3" />
    </sequential>
  </macrodef>
  <macrodef name="modifyJDBCConfig">
    <attribute name="file" />
    <sequential>
      <replaceregexp file="@{file}" match="(description=&quot;Connection pool for BSS&quot;)(.*)(\n)(.*)(name=&quot;serverName&quot;\svalue=&quot;)(.*)(&quot;&gt;)" replace="\1\2\3\4\5${db.host}\7" />
    </sequential>
  </macrodef>

  <macrodef name="modifyJMSConfig">
    <attribute name="file" />
    <sequential>
      <replaceregexp file="@{file}" match="(AddressList&quot;\svalue=&quot;mq://)(.*):" replace="\1${glassfish.master.domain.host}:" />
    </sequential>
  </macrodef>

  <macrodef name="modifyMailConfig">
    <attribute name="file" />
    <sequential>
      <condition property="mail.user.setting" value="${mail.user}">
        <not>
          <equals arg1="${mail.user}" arg2="" />
        </not>
      </condition>
      <condition property="mail.pwd.setting" value="${mail.password}">
        <not>
          <equals arg1="${mail.password}" arg2="" />
        </not>
      </condition>
      <condition property="mail.user.setting" value="saas">
        <and>
          <equals arg1="${mail.user}" arg2="" />
          <isfalse value="${mail.use.authentication}" />
        </and>
      </condition>
      <condition property="mail.pwd.setting" value="saas">
        <and>
          <equals arg1="${mail.password}" arg2="" />
          <isfalse value="${mail.use.authentication}" />
        </and>
      </condition>
      <replaceregexp file="@{file}" match="(mail-resource\shost=&quot;)(.*)(&quot;\sdescription)" replace="\1${mail.host}\3" />
      <replaceregexp file="@{file}" match="(from=&quot;)(.*)(&quot;\suser=&quot;)(.*)(&quot;)" replace="\1${mail.response.address}\3${mail.user}\5" />
      <replaceregexp file="@{file}" match="(mail-smtp-password&quot;\svalue=&quot;)(.*)&quot;" replace="\1${mail.pwd.setting}&quot;" />
      <replaceregexp file="@{file}" match="(mail-user&quot;\svalue=&quot;)(.*)&quot;" replace="\1${mail.user.setting}&quot;" />
    </sequential>
  </macrodef>

  <target name="STANDALONE.setupWithPreparedGlassfish">
    <antcall target="askBefore" />
    <antcall target="initDB" />
    <antcall target="besSetupAndDeploy_StandaloneWithPreparedGlassfish" />
    <antcall target="exampleSetupAndDeployWithPreparedGlassfish" />
    <sleep seconds="90" />
  </target>


  <target name="besSetupAndDeploy_StandaloneWithPreparedGlassfish">
    <antcall target="setupMasterIndexerWithPreparedGlassfish" />
    <antcall target="setupBesWithPreparedGlassfish" />
  </target>

  <macrodef name="utilcall">
    <attribute name="target" />
    <sequential>
      <ant antfile="${util.script}" target="@{target}">
        <property name="working.dir" value="${work.bss.setup.dir}" />
      </ant>
    </sequential>
  </macrodef>

  <target name="setupBesWithPreparedGlassfish">
    <startDomain domain="${glassfish.bes.domain.name}" port="${glassfish.bes.domain.admin.port}" />
    <ant antfile="${sso.script}" target="patchBSSEarForSTS">
      <property name="working.dir" value="${work.bss.setup.dir}" />
    </ant>
    <utilcall target="deployBesEarStandalone" />
    <deployOnBesDomain target="server" appl="${work.setup.dir}/oscm-portal.war" />
    <deployOnBesDomain target="server" appl="${work.setup.dir}/oscm-portal-help.war" />
    <stopDomain domain="${glassfish.bes.domain.name}" />
    <startDomain domain="${glassfish.bes.domain.name}" port="${glassfish.bes.domain.admin.port}" />
  </target>

  <target name="setupMasterIndexerWithPreparedGlassfish">
    <startDomain domain="${glassfish.master.domain.name}" port="${glassfish.master.domain.admin.port}" />
    <deployOnIndexerDomain appl="${work.setup.dir}/oscm-search.ear" />
    <stopDomain domain="${glassfish.master.domain.name}" />
    <startDomain domain="${glassfish.master.domain.name}" port="${glassfish.master.domain.admin.port}" />
  </target>

  <target name="exampleSetupAndDeployWithPreparedGlassfish">
    <startDomain domain="${glassfish.example.domain.name}" port="${glassfish.example.domain.admin.port}" />
    <deployOnExampleDomain appl="${build.result.package.dir}/example-service/example-service.war" />
    <deployOnExampleDomain appl="${build.result.package.dir}/oscm-integrationtests-mockproduct/oscm-integrationtests-mockproduct.war" />
    <deployOnExampleDomain appl="${build.result.package.dir}/mock-psp-service/mock-psp-service.war" />
    <antcall target="deployMockSTS" />
    <deployOnExampleDomain appl="${build.result.package.dir}/oscm-psp-heidelpay/oscm-psp-heidelpay.war" />
    <deployOnExampleDomain appl="${build.result.package.dir}/oscm-integrationtests-parameter-configurator/oscm-parameter-configurator.war" />
  	<deployOnExampleDomain appl="${build.result.package.dir}/oscm-file-billing-adapter/oscm-file-adapter.ear" />
    <deployOnExampleDomain appl="${build.result.package.dir}/oscm-file-billing-application/oscm-file-billing.war" />
    <stopDomain domain="${glassfish.example.domain.name}" />
    <startDomain domain="${glassfish.example.domain.name}" port="${glassfish.example.domain.admin.port}" />
  </target>

  <target name="waitForBES">
    <waitfor maxwait="10" maxwaitunit="minute" checkevery="3" checkeveryunit="second" timeoutproperty="waitForBES.timedOut">
      <and>
        <http url="http://localhost:${glassfish.bes.domain.http.port}/oscm-portal/" errorsBeginAt="404" />
        <http url="http://localhost:${glassfish.bes.domain.http.port}/oscm-startup-webapp/" errorsBeginAt="404" />
      </and>
    </waitfor>
    <!-- Although domains are ready the operator client still failed in the first steps of the web tests. -->
    <sleep minutes="5" />
    <antcall target="echoWaitForBESTimedOut" />
  </target>

  <target name="echoWaitForBESTimedOut" if="waitForBES.timedOut">
    <echo message="Waiting for BES portal and application timed out. Following target could fail due to not deployed application." />
  </target>
</project>
