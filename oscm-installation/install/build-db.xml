<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright FUJITSU LIMITED 2017-->

<project name="Database tasks" default="initDB" basedir=".">

  <!-- properties -->
  <property environment="env" />
  <property name="data.dir" value="${basedir}/.." />
  <property file="parallel-execution.properties" />

  <import file="macrodefs-db.xml" />

  <!-- ant-contrib tasks (foreach) -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="ant-contrib/ant-contrib-1.0b3.jar" />
    </classpath>
  </taskdef>

  <!-- user targets -->
  <target name="_CREATE.dbAndUser">
    <create.user failonerror="false" />
    <create.db />
  </target>

  <target name="_DROP.dbAndUser">
    <delete.db failonerror="false" />
    <delete.user failonerror="false" />
  </target>

  <target name="_DROP_FORCED.dbAndUser">
    <delete.forced.db failonerror="false" />
    <delete.user failonerror="false" />
  </target>

  <!-- path -->
  <path id="client.path">
    <fileset dir="lib" includes="*.jar" />
  </path>

  <target name="UPDATE.dbSchemaSingle">
    <echo message="Applying SQL scripts from databases/${db.dir}/sql " />
    <property file="${data.dir}/databases/${db.dir}/db.properties" />
    <property name="db.url" value="jdbc:${db.type}://${db.host}:${db.port}/${db.name}" />
    <java classname="org.oscm.setup.DatabaseUpgradeHandler" failonerror="true">
      <arg value="${data.dir}/databases/${db.dir}/db.properties" />
      <arg value="${data.dir}/databases/${db.dir}/sql" />
      <arg value="db.pwd=${db.pwd}" />
      <sysproperty key="javax.xml.parsers.SAXParserFactory" value="com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl" />
      <sysproperty key="javax.xml.parsers.DocumentBuilderFactory" value="com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl" />
      <sysproperty key="javax.xml.transform.TransformerFactory" value="com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl" />
      <classpath path="${java.home}/lib/rt.jar" />
      <classpath refid="client.path" />
    </java>
  </target>

  <target name="CREATE.dbAndUserSingle">
    <antcall target="_CREATE.dbAndUser">
      <param file="${data.dir}/databases/${db.dir}/${db.file}" />
    </antcall>
  </target>

  <target name="DROP.dbAndUserSingle">
    <antcall target="_DROP.dbAndUser">
      <param file="${data.dir}/databases/${db.dir}/${db.file}" />
    </antcall>
  </target>

  <target name="CREATE.dbsAndUsers" description="">
    <antcall target="CREATE.dbAndUserFromParam" />
    <antcall target="CREATE.dbAndUserFromDbDir" />
  </target>

  <target name="CREATE.dbAndUserFromParam" if="db.setup.set">
    <antcall target="CREATE.dbAndUser" />
  </target>

  <target name="CREATE.dbAndUserFromDbDir" unless="db.setup.set">
    <dirset id="dist.contents" dir="${data.dir}/databases" includes="*" />
    <property name="prop.dist.contents" refid="dist.contents" />
    <foreach list="${prop.dist.contents}" delimiter=";" param="db.dir" target="CREATE.dbAndUser" parallel="${parallel}" />
  </target>

  <target name="CREATE.dbAndUser">
    <antcall target="CREATE.dbAndUserSingle">
      <param name="db.file" value="db.properties" />
    </antcall>
    <antcall target="CREATE.jmsDbAndUserSingle" />
  </target>

  <target name="CREATE.jmsDbAndUserSingle" if="jms.exists" depends="jmsConfigExists">
    <antcall target="jmsPropertyConfig">
      <param file="${data.dir}/databases/${db.dir}/db.properties" />
    </antcall>
    <antcall target="CREATE.dbAndUserSingle">
      <param name="db.file" value="/installer/db_jms.properties" />
    </antcall>
  </target>

  <target name="jmsPropertyConfig" if="jms.exists" depends="jmsConfigExists">
    <propertyfile file="${data.dir}/databases/${db.dir}/installer/db_jms.properties">
      <entry key="db.port" operation="=" value="${db.port}" />
      <entry key="db.host" operation="=" value="${db.host}" />
    </propertyfile>
  </target>

  <target name="DROP.dbsAndUsers" description="">
    <antcall target="DROP.dbAndUserFromParam" />
    <antcall target="DROP.dbAndUserFromDbDir" />
  </target>

  <target name="DROP.dbAndUserFromParam" if="db.setup.set">
    <antcall target="DROP.dbAndUser" />
  </target>

  <target name="DROP.dbAndUser">
    <antcall target="DROP.dbAndUserSingle">
      <param name="db.file" value="db.properties" />
    </antcall>
    <antcall target="DROP.jmsDbAndUserSingle" />
  </target>

  <target name="DROP.jmsDbAndUserSingle" if="jms.exists" depends="jmsConfigExists">
    <antcall target="jmsPropertyConfig">
      <param file="${data.dir}/databases/${db.dir}/db.properties" />
    </antcall>
    <antcall target="DROP.dbAndUserSingle">
      <param name="db.file" value="/installer/db_jms.properties" />
    </antcall>
  </target>

  <target name="DROP.dbAndUserFromDbDir" unless="db.setup.set">
    <dirset id="dist.contents" dir="${data.dir}/databases" includes="*" />
    <property name="prop.dist.contents" refid="dist.contents" />
    <foreach list="${prop.dist.contents}" delimiter=";" param="db.dir" target="DROP.dbAndUser" parallel="${parallel}" />
  </target>

  <target name="UPDATE.dbSchema" description="">
    <antcall target="UPDATE.dbSchemaFromParam" />
    <antcall target="UPDATE.dbSchemaFromDbDir" />
  </target>

  <target name="UPDATE.configSettings" description="">
    <antcall target="UPDATE.configSettingsFromParam" />
    <antcall target="UPDATE.configSettingsFromDbDir">
    </antcall>
  </target>

  <target name="UPDATE.configSettingsFromParam" depends="setParam" if="db.setup.set">
    <antcall target="UPDATE.configSettingsSingle">
      <param file="${data.dir}/databases/${db.dir}/configsettings.properties" />
      <param file="${data.dir}/databases/${db.dir}/db.properties" />
    </antcall>
  </target>

  <target name="UPDATE.configSettingsFromDbDir" unless="db.setup.set">
    <dirset id="dist.contents" dir="${data.dir}/databases" includes="*" />
    <property name="prop.dist.contents" refid="dist.contents" />
    <foreach list="${prop.dist.contents}" delimiter=";" param="db.dir" target="UPDATE.configSettingsSingle" parallel="${parallel}" inheritall="true" />
  </target>

  <target name="UPDATE.configSettingsSingle">
    <property file="${data.dir}/databases/${db.dir}/installer/updateconfiguration.properties" />
    <antcall target="UPDATE.configSettingsExecution">
      <param file="${data.dir}/databases/${db.dir}/db.properties" />
    </antcall>
    <antcall target="UPDATE.configSettingsController">
      <param file="${data.dir}/databases/${db.dir}/db.properties" />
    </antcall>
    <antcall target="UPDATE.importSSOProperty">
      <param file="${data.dir}/databases/${db.dir}/db.properties" />
    </antcall>
  </target>

  <target name="UPDATE.configSettingsExecution" if="configSettings.exists" depends="configExists">
    <property name="db.url" value="jdbc:${db.type}://${db.host}:${db.port}/${db.name}" />
    <java classname="${propertyImporter}" failonerror="true">
      <arg value="${db.driver.class}" />
      <arg value="${db.url}" />
      <arg value="${db.user}" />
      <arg value="${db.pwd}" />
      <arg value="${data.dir}/databases/${db.dir}/configsettings.properties" />
      <arg value="true" />
      <classpath refid="client.path" />
    </java>
  </target>

  <target name="UPDATE.importSSOProperty" if="sso.exists" depends="ssoConfigExists">
    <property name="db.url" value="jdbc:${db.type}://${db.host}:${db.port}/${db.name}" />
    <java classname="org.oscm.ssopropertyimport.SSOPropertyImport" failonerror="true">
      <arg value="${db.driver.class}" />
      <arg value="${db.url}" />
      <arg value="${db.user}" />
      <arg value="${db.pwd}" />
      <arg value="${data.dir}/databases/${db.dir}/configsettings.properties" />
      <arg value="${data.dir}/databases/${db.dir}/sso.properties" />
      <classpath refid="client.path" />
    </java>
  </target>

  <target name="UPDATE.configSettingsController" if="controller.configSettings.exists" depends="controllerConfigExists">
    <property name="db.url" value="jdbc:${db.type}://${db.host}:${db.port}/${db.name}" />
    <java classname="${propertyImporter}" failonerror="true">
      <arg value="${db.driver.class}" />
      <arg value="${db.url}" />
      <arg value="${db.user}" />
      <arg value="${db.pwd}" />
      <arg value="${data.dir}/databases/${db.dir}/configsettings_controller.properties" />
      <arg value="true" />
      <arg value="CONTROLLER" />
      <classpath refid="client.path" />
    </java>
  </target>

  <target name="UPDATE.dbSchemaFromParam" if="db.setup.set">
    <antcall target="UPDATE.dbSchemaSingle" />
  </target>

  <target name="UPDATE.dbSchemaFromDbDir" unless="db.setup.set">
    <dirset id="dist.contents" dir="${data.dir}/databases" includes="*" />
    <property name="prop.dist.contents" refid="dist.contents" />
    <foreach list="${prop.dist.contents}" delimiter=";" param="db.dir" target="UPDATE.dbSchemaSingle" parallel="${parallel}" />
  </target>

  <target name="initDB" depends="setParam">
    <antcall target="CREATE.dbsAndUsers" />
    <antcall target="UPDATE.dbSchema" />
    <antcall target="UPDATE.configSettings" />
  </target>

  <target name="updateDatabase" depends="setParam">
    <antcall target="UPDATE.dbSchema" />
    <antcall target="UPDATE.configSettings" />
  </target>

  <target name="checkParam">
    <condition property="db.setup.set">
      <isset property="db.setup" />
    </condition>
  </target>

  <target name="setParam" depends="checkParam" if="db.setup.set">
    <property name="db.dir" value="${db.setup}" />
  </target>

  <target name="configExists">
    <available file="${data.dir}/databases/${db.dir}/configsettings.properties" property="configSettings.exists" />
  </target>

  <target name="controllerConfigExists">
    <available file="${data.dir}/databases/${db.dir}/configsettings_controller.properties" property="controller.configSettings.exists" />
  </target>

  <target name="ssoConfigExists">
    <available file="${data.dir}/databases/${db.dir}/sso.properties" property="sso.exists" />
  </target>

  <target name="jmsConfigExists">
    <available file="${data.dir}/databases/${db.dir}/installer/db_jms.properties" property="jms.exists" />
  </target>
</project>
