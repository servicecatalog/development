<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright FUJITSU LIMITED 2017-->

<project name="Complete application installation " default="SETUP" basedir=".">

  <description />

  <!-- property files and imports -->
  <property environment="env" />
  <property name="domains.dir" value="${basedir}/../domains" />
  <property file="parallel-execution.properties" />
  <import file="macrodefs-glassfish.xml" />


  <!-- ant-contrib tasks (foreach) -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="ant-contrib/ant-contrib-1.0b3.jar" />
    </classpath>
  </taskdef>

  <!-- Print needed and current Java version -->
  <target name="PrintJavaVersion">
    <echo message="Make sure that the JAVA_HOME environment variable points to a 1.8, 64 bit JDK." />

    <echo message="Current JAVA version is  ${java.version}." />
  </target>

  <target name="SETUP" depends="PrintJavaVersion,setParam">
    <antcall target="SETUP.fromParam" />
    <antcall target="SETUP.fromDir" />
  </target>

  <target name="SETUP.fromParam" if="domain.setup.set">
    <antcall target="SETUP.Single" />
  </target>

  <target name="SETUP.fromDir" unless="domain.setup.set">
    <available file="${domains.dir}/installationOrder.properties" property="installationOrder.exists" />
    <if>
      <equals arg1="${installationOrder.exists}" arg2="true" />
      <then>
        <installationOrderProperties />
        <foreach list="${installation.order}" delimiter=";" param="domain.dir" target="SETUP.Single" />
      </then>
      <else>
        <dirset id="dist.contents" dir="${domains.dir}" includes="*" />
        <property name="prop.dist.contents" refid="dist.contents" />
        <foreach list="${prop.dist.contents}" delimiter=";" param="domain.dir" target="SETUP.Single" parallel="${parallel}" />
      </else>
    </if>
  </target>

  <target name="SETUP.configureDomains" unless="domain.setup.set">
    <available file="${domains.dir}/installationOrder.properties" property="installationOrder.exists" />
    <if>
      <equals arg1="${installationOrder.exists}" arg2="true" />
      <then>
        <installationOrderProperties />
        <foreach list="${installation.order}" delimiter=";" param="domain.dir" target="SETUP.configure" />
      </then>
      <else>
        <dirset id="dist.contents" dir="${domains.dir}" includes="*" />
        <property name="prop.dist.contents" refid="dist.contents" />
        <foreach list="${prop.dist.contents}" delimiter=";" param="domain.dir" target="SETUP.configure" parallel="${parallel}" />
      </else>
    </if>
  </target>

  <target name="SETUP.Single" depends="importProperties,verifySettings,configSteps" if="settings.complete">

    <!--create domain-->
    <createDomainWithPortbase />

    <!-- configure domain -->
    <antcall target="SETUP.configure" />

    <antcall target="copyOldKeyFile" />
    <!--patch ear-->
    <antcall target="patchEar" />

    <!--deploy all applications-->
    <antcall target="deployAllApplications" />

    <!--restart the domain-->
    <antcall target="restartDomain" />

  </target>

  <target name="SETUP.configure" depends="PrintJavaVersion,setParam,importProperties,verifySettings,configSteps" if="settings.complete">

    <antcall target="modifyJspServlet" />

    <!--copy required glassfish resources -->
    <antcall target="copyRequiredGlassfishResources" />

    <!--copy libraries -->
    <antcall target="copyLibraries" />

    <!--start domain-->
    <startDomain domain="${glassfish.domain.name}" />

    <!--set all JVM options  -->
    <antcall target="setJVMOptions" />

    <!--add resources  -->
    <antcall target="addResources" />

    <!--add additional resources if exist  -->
    <antcall target="addResourcesExtension" />

    <!--create JMS Resources  -->
    <antcall target="createJMSResources" />

    <antcall target="configureIMQBroker" />

    <!--configure security realm  -->
    <antcall target="configureSecurityRealm">
      <param name="target.name" value="server" />
    </antcall>

    <!--set all attributes  -->
    <antcall target="setConfigurationAttributes" />

  </target>


  <target name="configureIMQBroker" if="broker.exists">
    <!-- stop domain -->
    <stopDomain domain="${glassfish.domain.name}" />

    <!-- re-create the messaging related tables -->
    <echo message="re-create the messaging related tables (output redirected to ${java.io.tmpdir}/BES/configureIMQBrokerMasterDomain_recreateTables.txt)" />
    <exec executable="${glassfish.imq.dir}/imqdbmgr${extension}" output="${java.io.tmpdir}/BES/configureIMQBrokerMasterDomain_recreateTables.txt" logError="false" failonerror="false">
      <arg value="recreate" />
      <arg value="tbl" />
      <arg value="-varhome" />
      <arg value="${glassfish.domain.broker.base.dir}" />
    </exec>

    <!-- copy jms user configuration by hand, instead of using imqusermgr.sh  due to GF3 problems -->
    <antcall target="copyBrokerFiles" inheritall="true" />

    <startDomain domain="${glassfish.domain.name}" />
  </target>

  <target name="copyBrokerFiles">
    <antcall target="copyFiles" inheritall="true">
      <param name="src.file" value="${domains.dir}/${domain.dir}/installer/broker.properties" />
    </antcall>
  </target>

  <target name="copyRequiredGlassfishResources" if="requiredGlassfishResources.exists">
    <antcall target="copyFiles" inheritall="true">
      <param name="src.file" value="${domains.dir}/${domain.dir}/installer/requiredGlassfishResources.properties" />
    </antcall>
  </target>

  <target name="modifyJspServlet" if="defaultWeb.exists">
    <replaceregexp file="${glassfish.domain.dir}/config/default-web.xml" byline="false" match="^[\s]*&lt;param-name&gt;xpoweredBy&lt;/param-name&gt;[${line.separator}]^[\s]*&lt;param-value&gt;true&lt;/param-value&gt;" replace="      &lt;param-name&gt;xpoweredBy&lt;/param-name&gt;${line.separator}      &lt;param-value&gt;false&lt;/param-value&gt;" flags="gmi" />
  </target>

  <target name="copyLibraries" if="lib.exists">

    <antcall target="copyFiles" inheritall="true">
      <param name="src.file" value="${domains.dir}/${domain.dir}/installer/lib.properties" />
    </antcall>
    <echo>
      ${domains.dir}/${domain.dir}/installer/lib.properties
    </echo>
  </target>

  <target name="copyFiles">
    <echo>
      ${src.file}
    </echo>
    <loadfile property="infofile" srcfile="${src.file}">
      <filterchain>
        <striplinecomments>
          <comment value="#" />
        </striplinecomments>
        <striplinebreaks />
        <expandproperties />
      </filterchain>
    </loadfile>
    <foreach list="${infofile}" delimiter=";" param="copyinfo" target="copyFile" inheritall="true" />
  </target>

  <target name="copyFile">
    <propertyregex property="copytype" input="${copyinfo}" regexp="(.*):from:(.*)" select="\1" />
    <propertyregex property="from" input="${copyinfo}" regexp="(.*):from:(.*):to(.*)" select="\2" />
    <propertyregex property="to" input="${copyinfo}" regexp="(.*):to:(.*)" select="\2" />
    <echo>
      ${domains.dir}/${domain.dir}/${from}
      ${to}
    </echo>
    <if>
      <equals arg1="${copytype}" arg2="file" />
      <then>
        <copy file="${domains.dir}/${domain.dir}/${from}" tofile="${to}" overwrite="true" />
      </then>
      <elseif>
        <equals arg1="${copytype}" arg2="dir" />
        <then>
          <copy file="${domains.dir}/${domain.dir}/${from}" todir="${to}" overwrite="true" />
        </then>
      </elseif>
      <elseif>
        <equals arg1="${copytype}" arg2="dirAvailable" />
        <then>
          <fail message="Cannot find ${from} for copying">
            <condition>
              <not>
                <available file="${domains.dir}/${domain.dir}/${from}" />
              </not>
            </condition>
          </fail>
          <copy file="${domains.dir}/${domain.dir}/${from}" todir="${to}" overwrite="true" />
        </then>
      </elseif>
    </if>
  </target>

  <target name="setJVMOptions" if="jvmoptions.exists">
    <jvmOptionsProperties />
    <deleteJVMOptions jvmoptions="${delete.jvm.options}" />
    <createJVMOptions jvmoptions="${create.jvm.options}" />
  </target>

  <target name="setConfigurationAttributes" if="attributes.exists">
    <attributesProperties />
    <foreach list="${attributes}" delimiter="#" param="attribute" target="setConfigurationAttribute" inheritall="true" />
  </target>

  <target name="setConfigurationAttribute">
    <setAttribute attribute="${attribute}" />
  </target>

  <target name="addResources" if="resources.xml.exists">
    <antcall target="deleteExistingResources" />
    <dbProperties />
    <verifyDbProperties />
    <condition property="settings.complete">
      <istrue value="${db.properties.complete}" />
    </condition>
    <fail unless="settings.complete" message="database settings not complete." />
    <processResourcesXml />
    <addRes />
    <antcall target="createWebServicePort">
      <param name="target.name" value="server" />
    </antcall>
    <antcall target="createWebServicePortSecure">
      <param name="target.name" value="server" />
    </antcall>
    <antcall target="createSSL" />
  </target>

  <target name="addResourcesExtension" if="resources-extension-template.xml.exists">
    <dbProperties dbloc="${db.controller.location}" />
    <verifyDbProperties />
    <condition property="settings.complete">
      <istrue value="${db.properties.complete}" />
    </condition>
    <fail unless="settings.complete" message="database settings not complete." />
    <processResourcesXml restemplate="resources-extension-template.xml" resoutput="resources-extension.xml" />
    <addRes resfile="resources-extension.xml" />
  </target>

  <target name="deleteExistingResources" if="resources.exists">
    <resourcesProperties />
    <deleteJdbcRes />
    <deleteMailRes />
    <antcall target="deleteJmsResources" />
  </target>

  <target name="deleteJmsResources">
    <foreach list="${jms_names}" delimiter=";" param="jms_name" target="deleteJmsRes" inheritall="true" />
  </target>

  <target name="deleteJmsRes">
    <deleteJmsRes jmsname="${jms_name}" />
  </target>

  <target name="createJMSResources" if="jmsresources.exists">
    <antcall target="copyFiles" inheritall="true">
      <param name="src.file" value="${domains.dir}/${domain.dir}/installer/jmsResources/resources.properties" />
    </antcall>
    <antcall target="updatePropForJms" />
  </target>

  <target name="updatePropForJms" if="updatePropForJms.exists">
    <loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer/jmsResources" filename="updateProp.properties" />
    <updateProp propFile="${updateProp.file}" key="${updateProp.key}" value="${updateProp.value}" comment="${updateProp.comment}" />
  </target>

  <target name="configureSecurityRealm" if="securityrealm.exists">
    <realmProperties />
    <deleteExistingRealm realm.name="${auth.realm.name}" />
    <createRealm realm.name="${auth.realm.name}" />
    <asadmin.domain command="set">
      <arg value="${target.name}.security-service.auth-realm.certificate.property.assign-groups=CLIENTCERT" />
    </asadmin.domain>
    <property name="glassfish.login.conf.file" value="${glassfish.home}/glassfish//domains/${glassfish.domain.name}/config/login.conf" />
    <loadfile property="login.conf.content" srcfile="${glassfish.login.conf.file}" />
    <condition property="bes.realm.setting.required">
      <not>
        <contains string="${login.conf.content}" substring="org.oscm.security.ADMLoginModule" />
      </not>
    </condition>
    <antcall target="appendBssRealm" />
  </target>

  <target name="appendBssRealm" if="bes.realm.setting.required">
    <echo file="${glassfish.home}/glassfish//domains/${glassfish.domain.name}/config/login.conf" append="true">
       bssRealm {
         org.oscm.security.ADMLoginModule required;
       };
       </echo>
  </target>

  <target name="stopAndDeleteDomain">
    <stopDomain domain="${glassfish.domain.name}" failonerror="false" />
    <deleteDomain domain="${glassfish.domain.name}" failonerror="false" />
  </target>

  <target name="deployAllApplications">
    <antcall target="deployAllEars" />
    <antcall target="deployAllWars" />
    <antcall target="setLoggingLevel" />
    <antcall target="setFileRotationHistory" />
  </target>

  <target name="deployAllEars">
    <patchProperties />
    <antcall target="backupEarForDeploy" />
    <fileset id="app.fileset" dir="${domains.dir}/${domain.dir}/applications" includes="*.ear" />
    <property name="app.files" refid="app.fileset" />
    <foreach list="${app.files}" delimiter=";" param="app.file" target="deployApplication" inheritall="true" />
    <antcall target="cleanBackup" />
  </target>

  <target name="backupEarForDeploy" if="backup">
    <condition property="backupEarExists">
      <available file="${domains.dir}/${domain.dir}/tmp/${ear.name}" type="file" />
    </condition>
    <antcall target="copyEar" />
  </target>

  <target name="copyEar" unless="backupEarExists">
    <mkdir dir="${domains.dir}/${domain.dir}/tmp" />
    <copy file="${domains.dir}/${domain.dir}/applications/${ear.name}" tofile="${domains.dir}/${domain.dir}/tmp/${ear.name}" overwrite="true" />
  </target>

  <target name="cleanBackup" if="backup">
    <delete dir="${domains.dir}/${domain.dir}/tmp" failonerror="false" />
  </target>

  <target name="deployAllWars">
    <fileset id="war.fileset" dir="${domains.dir}/${domain.dir}/applications" includes="*.war" />
    <property name="war.files" refid="war.fileset" />
    <foreach list="${war.files}" delimiter=";" param="war.file" target="deployWar" inheritall="true" />
  </target>

  <target name="deployApplication">
    <if>
      <equals arg1="${backup}" arg2="true" />
      <then>
        <if>
          <equals arg1="${app.file}" arg2="${ear.name}" />
          <then>
            <deployApp appfile="${domains.dir}/${domain.dir}/tmp/${app.file}" targetname="server" />
          </then>
          <else>
            <deployApp appfile="${domains.dir}/${domain.dir}/applications/${app.file}" targetname="server" />
          </else>
        </if>
      </then>
      <else>
        <deployApp appfile="${domains.dir}/${domain.dir}/applications/${app.file}" targetname="server" />
      </else>
    </if>
  </target>

  <target name="deployWar">
    <deployWar warfile="${domains.dir}/${domain.dir}/applications/${war.file}" targetname="server" />
  </target>

  <target name="restartDomain">
    <stopDomain domain="${glassfish.domain.name}" />
    <startDomain domain="${glassfish.domain.name}" />
  </target>

  <target name="importProperties">
    <glassfishProperties />
    <dbLocationProperties />
    <mailProperties />
    <jarProperties />
    <domainProperties />
    <verifySettingsProperties />
  </target>

  <target name="verifySettings" depends="importProperties">
    <verifyMailProperties />
    <verifyJarProperties />
    <verifyDomainProperties />
    <condition property="settings.complete">
      <and>
        <istrue value="${mail.properties.complete}" />
        <istrue value="${jar.properties.complete}" />
        <istrue value="${domain.properties.complete}" />
      </and>
    </condition>
    <fail unless="settings.complete" message="domain settings not complete." />
  </target>
  
  <target name="configSteps">
    <available file="${domains.dir}/${domain.dir}/installer/JVM-options.properties" property="jvmoptions.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/security-realm.properties" property="securityrealm.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/configuration-attributes.properties" property="attributes.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/patch.properties" property="patch.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/resources-template.xml" property="resources.xml.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/resources-extension-template.xml" property="resources-extension-template.xml.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/lib.properties" property="lib.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/broker.properties" property="broker.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/resources.properties" property="resources.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/jmsResources" type="dir" property="jmsresources.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/jmsResources/updateProp.properties" property="updatePropForJms.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/requiredGlassfishResources.properties" property="requiredGlassfishResources.exists" />
    <available file="${glassfish.domain.dir}/config/default-web.xml" property="defaultWeb.exists" />
    <available file="${domains.dir}/${domain.dir}/installer/key" property="oldKeyFile.exists" type="file"/>
  </target>

  <target name="checkParam">
    <condition property="domain.setup.set">
      <isset property="domain.setup" />
    </condition>
  </target>

  <target name="setParam" depends="checkParam" if="domain.setup.set">
    <property name="domain.dir" value="${domain.setup}" />
  </target>

  <target name="patchEar" if="patch.exists">
    <patchProperties />
    <ant antfile="${patch.script}" target="patchAll" inheritall="true" />
  </target>

  <!-- verify domain exists -->
  <target name="DomainExists">
    <available file="${glassfish.home}" property="domain.home.exists" />
    <available file="${glassfish.domain.dir}/config/domain.xml" property="domain.exists" />
  </target>

  <target name="importPropertiesForPatch">
    <patchProperties filepath="${patchProps.path}" />
    <glassfishProperties />
    <domainProperties />
  </target>

  <target name="patchAndRedeployApplication" depends="importPropertiesForPatch,DomainExists,PrintJavaVersion">
    <fail unless="domain.exists" message="The domain does not exist." />
    <ant antfile="${patch.script}" target="patchApplication" inheritall="true" />
    <antcall target="redeployApplication" />
  </target>

  <target name="redeployApplication" depends="importPropertiesForPatch,backupEarForDeploy">
    <if>
      <equals arg1="${checkDTD}" arg2="true" />
      <then>
        <fail message="Please ensure that sun-ejb-jar-DTD referenced in Web services is provided by glassfish dtd repository">
          <condition>
            <not>
              <available file="${glassfish.dtd.repository}/sun-ejb-jar_3_0-1.dtd" />
            </not>
          </condition>
        </fail>
      </then>
    </if>
    <if>
      <equals arg1="${backup}" arg2="true" />
      <then>
        <equals arg1="${app.file}" arg2="${ear.name}" />
        <then>
          <echo message="redeploy ${domains.dir}/${domain.dir}/tmp/${app.filename}..." />
          <redeployApp appfile="${domains.dir}/${domain.dir}/tmp/${app.filename}" app.name="${patch.app}" targetname="server" />
        </then>
        <else>
          <echo message="redeploy ${domains.dir}/${domain.dir}/applications/${app.filename}..." />
          <redeployApp appfile="${domains.dir}/${domain.dir}/applications/${app.filename}" app.name="${patch.app}" targetname="server" />
        </else>
      </then>
      <else>
        <echo message="redeploy ${domains.dir}/${domain.dir}/applications/${app.filename}..." />
        <redeployApp appfile="${domains.dir}/${domain.dir}/applications/${app.filename}" app.name="${patch.app}" targetname="server" />
      </else>
    </if>
    <antcall target="cleanBackup" />
  </target>

  <target name="patchApplication" depends="importPropertiesForPatch">
    <ant antfile="${patch.script}" target="patchApplication" inheritall="true" />
  </target>

  <target name="setLoggingLevel">
    <setLoggingLevel loggername="javax.enterprise.system.util=SEVERE"/>
  </target>

  <target name="setFileRotationHistory">
    <setFileRotationHistory rotationEntry="com.sun.enterprise.server.logging.GFFileHandler.maxHistoryFiles=10"/>
  </target>

  <target name="copyOldKeyFile" if="oldKeyFile.exists">
    <copy file="${domains.dir}/${domain.dir}/installer/key" todir="${glassfish.domain.dir}/config"
          preservelastmodified="true"/>
  </target>
</project>
