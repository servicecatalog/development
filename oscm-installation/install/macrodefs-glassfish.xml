<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright FUJITSU LIMITED 2017-->

<project name="BSS glassfish macro definitions" default="" basedir=".">

	<description />

	<property name="domainproperties.file" location="${domains.dir}/${domain.dir}/glassfish.properties" />
	<property file="${domainproperties.file}" />

	<macrodef name="loadPropertyFile">
		<attribute name="filepath" />
		<attribute name="filename" />
		<sequential>
			<property name="properties.file.@{filename}" location="@{filepath}/@{filename}" />
			<echo level="info">Loading properties from @{filepath}/@{filename}</echo>
			<property file="${properties.file.@{filename}}" />
		</sequential>
	</macrodef>

	<macrodef name="domainProperties">
		<sequential>
			<property name="glassfish.domain.lib.dir" value="${com.sun.aas.instanceRoot}/lib" />
			<property name="glassfish.domain.dir" value="${glassfish.home}/glassfish/domains/${glassfish.domain.name}" />
			<property name="glassfish.dtd.repository" value="${glassfish.home}/glassfish/lib/dtds" />
			<!-- MQ broker properties for domain -->
			<property name="glassfish.domain.broker.base.dir" value="${glassfish.domain.dir}/imq" />
			<property name="glassfish.domain.broker.dir" value="${glassfish.domain.broker.base.dir}/instances/imqbroker" />
			<!-- classpath suffix for domain -->
			<if>
				<or>
					<equals arg1="${domain.dir}" arg2="app_domain" />
					<equals arg1="${domain.dir}" arg2="ror_domain" />
				</or>
				<then>
					<property name="glassfish.classpath" value="${com.sun.aas.installRoot}/lib/appserv-admin.jar${path.separator}${glassfish.domain.lib.dir}/${jdbc.driver.jar.name}" />
				</then>
				<else>
					<property name="glassfish.classpath" value="${glassfish.domain.lib.dir}/${bss.security.jar.name}${path.separator}${com.sun.aas.installRoot}/lib/appserv-admin.jar${path.separator}${glassfish.domain.lib.dir}/${jdbc.driver.jar.name}" />
				</else>
			</if>
			<!-- jms user for bssjms-->
			<property name="glassfish.bes.domain.portbase" value="${glassfish.bes.domain.portbase}" />
			<property name="glassfish.master.domain.portbase" value="${glassfish.master.domain.portbase}" />
			<property name="jms.user.name" value="jmsuser" />
			<property name="jms.user.pwd" value="jmsuser" />
		</sequential>
	</macrodef>

	<macrodef name="jarProperties">
		<sequential>
			<!-- jdbc driver -->
			<property name="jdbc.driver.jar.name" value="${JDBC_DRIVER_JAR_NAME}" />
			<property name="jdbc.driver.jar.path" value="lib" />
			<property name="jdbc.driver.jar" value="${jdbc.driver.jar.path}/${jdbc.driver.jar.name}" />
			<!-- bss security jar -->
			<property name="bss.security.jar.name" value="oscm-security.jar" />
			<property name="bss.security.jar" value="${jdbc.driver.jar.path}/${bss.security.jar.name}" />
			<!-- app antlr jar -->
			<property name="antlr.jar.name" value="antlr-2.7.7.jar" />
			<property name="antlr.jar" value="${jdbc.driver.jar.path}/${antlr.jar.name}" />
			<!-- app commons-collections jar -->
			<property name="commons.collections.jar.name" value="commons-collections-3.2.2.jar" />
			<property name="commons.collections.jar" value="${jdbc.driver.jar.path}/${commons.collections.jar.name}" />
			<!-- app dom4j jar -->
			<property name="dom4j.jar.name" value="dom4j-1.6.1.jar" />
			<property name="dom4j.jar" value="${jdbc.driver.jar.path}/${dom4j.jar.name}" />
			<!-- app hibernate-commons jar -->
			<property name="hibernate.commons.jar.name" value="hibernate-commons-annotations-4.0.4.Final.jar" />
			<property name="hibernate.commons.jar" value="${jdbc.driver.jar.path}/${hibernate.commons.jar.name}" />
			<!-- app hibernate-core jar -->
			<property name="hibernate.core.jar.name" value="hibernate-core-5.0.9.Final.jar" />
			<property name="hibernate.core.jar" value="${jdbc.driver.jar.path}/${hibernate.core.jar.name}" />
			<!-- app hibernate-entitymanager jar -->
			<property name="hibernate.entitymanager.jar.name" value="hibernate-entitymanager-5.0.9.Final.jar" />
			<property name="hibernate.entitymanager.jar" value="${jdbc.driver.jar.path}/${hibernate.entitymanager.jar.name}" />
			<!-- app hibernate-jpa jar -->
			<property name="hibernate.jpa.jar.name" value="hibernate-jpa-2.1-api-1.0.0.Final.jar" />
			<property name="hibernate.jpa.jar" value="${jdbc.driver.jar.path}/${hibernate.jpa.jar.name}" />
			<!-- app javassist jar -->
			<property name="javassist.jar.name" value="javassist-3.20.0-GA.jar" />
			<property name="javassist.jar" value="${jdbc.driver.jar.path}/${javassist.jar.name}" />
			<!-- app jboss-logging jar -->
			<property name="jboss.logging.jar.name" value="jboss-logging.jar" />
			<property name="jboss.logging.jar" value="${jdbc.driver.jar.path}/${jboss.logging.jar.name}" />
			<!-- app jboss-transaction jar -->
			<property name="jboss.transaction.jar.name" value="jboss-transaction-api_1.1_spec-1.0.1.Final.jar" />
			<property name="jboss.transaction.jar" value="${jdbc.driver.jar.path}/${jboss.transaction.jar.name}" />
			<!-- app log4j jar -->
			<property name="log4j.jar.name" value="log4j-1.2.16.jar" />
			<property name="log4j.jar" value="${jdbc.driver.jar.path}/${log4j.jar.name}" />
			<!-- app slf4j jar -->
			<property name="slf4j.api.jar.name" value="slf4j-api-1.7.7.jar" />
			<property name="slf4j.api.jar" value="${jdbc.driver.jar.path}/${slf4j.api.jar.name}" />
			<!-- app slf4j-log4j jar -->
			<property name="slf4j.log4j.jar.name" value="slf4j-log4j12-1.7.7.jar" />
			<property name="slf4j.log4j.jar" value="${jdbc.driver.jar.path}/${slf4j.log4j.jar.name}" />
		</sequential>
	</macrodef>

	<!-- Glassfish properties -->
	<macrodef name="glassfishProperties">
		<attribute name="filepath" default="${domains.dir}/${domain.dir}" />
		<sequential>
			<loadPropertyFile filepath="@{filepath}" filename="glassfish.properties" />
			<!-- glassfish home, asadmin, imq -->
			<condition property="batch.extension" value=".bat" else="">
				<os family="windows" />
			</condition>
			<condition property="extension" value=".exe" else="">
				<os family="windows" />
			</condition>
			<condition property="glassfish.home" value="${GLASSFISH_HOME}">
				<isset property="GLASSFISH_HOME" />
			</condition>
			<property name="glassfish.asadmin.file" location="${glassfish.home}/bin/asadmin${batch.extension}" />
			<property name="glassfish.imq.dir" value="${glassfish.home}/mq/bin" />
			<property name="glassfish.modules.dir" value="${glassfish.home}/glassfish/modules" />
		</sequential>
	</macrodef>

	<macrodef name="patchProperties">
		<attribute name="filepath" default="${domains.dir}/${domain.dir}/installer" />
		<sequential>
			<loadPropertyFile filepath="@{filepath}" filename="patch.properties" />
			<loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer" filename="dbLocation.properties" />
			<loadPropertyFile filepath="${domains.dir}/../databases/${db.location}" filename="configsettings.properties" />
		</sequential>
	</macrodef>

	<macrodef name="jvmOptionsProperties">
		<sequential>
			<loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer" filename="JVM-options.properties" />
		</sequential>
	</macrodef>

	<macrodef name="verifySettingsProperties">
		<sequential>
			<loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer" filename="verifySettings.properties" />
		</sequential>
	</macrodef>

	<macrodef name="dbLocationProperties">
		<sequential>
			<loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer" filename="dbLocation.properties" />
		</sequential>
	</macrodef>

	<macrodef name="dbProperties">
		<attribute name="dbloc" default="${db.location}" />
		<sequential>
			<loadPropertyFile filepath="${domains.dir}/../databases/@{dbloc}" filename="db.properties" />
			<condition property="db.user.name" value="${db.user}">
				<isset property="db.user" />
			</condition>
			<condition property="db.user.pwd" value="${db.pwd}">
				<isset property="db.pwd" />
			</condition>
			<condition property="db.name" value="${db.name}">
				<isset property="db.name" />
			</condition>
			<condition property="db.host" value="${db.host}">
				<isset property="db.host" />
			</condition>
			<condition property="db.port" value="${db.port}">
				<isset property="db.port" />
			</condition>
			<condition property="db.url" value="${db.url}">
				<isset property="db.url" />
			</condition>
			<condition property="db.driver.class" value="${db.driver.class}">
				<isset property="db.driver.class" />
			</condition>
			<property name="db.schema" value="${db.user.name}" />
		</sequential>
	</macrodef>

	<macrodef name="attributesProperties">
		<sequential>
			<loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer" filename="configuration-attributes.properties" />
		</sequential>
	</macrodef>

	<macrodef name="realmProperties">
		<sequential>
			<loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer" filename="security-realm.properties" />
		</sequential>
	</macrodef>

	<macrodef name="resourcesProperties">
		<sequential>
			<loadPropertyFile filepath="${domains.dir}/${domain.dir}/installer" filename="resources.properties" />
		</sequential>
	</macrodef>

	<macrodef name="installationOrderProperties">
		<sequential>
			<loadPropertyFile filepath="${domains.dir}" filename="installationOrder.properties" />
		</sequential>
	</macrodef>

	<macrodef name="mailProperties">
		<sequential>
			<condition property="mail.host" value="${MAIL_HOST}">
				<isset property="MAIL_HOST" />
			</condition>
			<condition property="mail.response.address" value="${MAIL_RESPONSE_ADDRESS}">
				<isset property="MAIL_RESPONSE_ADDRESS" />
			</condition>
			<condition property="mail.port" value="${MAIL_PORT}">
				<isset property="MAIL_PORT" />
			</condition>
			<condition property="mail.use.authentication" value="${MAIL_USE_AUTHENTICATION}">
				<isset property="MAIL_USE_AUTHENTICATION" />
			</condition>
			<condition property="mail.user" value="${MAIL_USER}">
				<isset property="MAIL_USER" />
			</condition>
			<condition property="mail.pwd" value="${MAIL_PWD}">
				<isset property="MAIL_PWD" />
			</condition>
			<condition property="mail.timeout" value="${MAIL_TIMEOUT}">
				<isset property="MAIL_TIMEOUT" />
			</condition>
			<condition property="mail.connectiontimeout" value="${MAIL_CONNECTIONTIMEOUT}">
				<isset property="MAIL_CONNECTIONTIMEOUT" />
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="deleteJdbcRes">
		<sequential>
			<asadmin.domain command="delete-jdbc-connection-pool" failonerror="false">
				<arg value="--cascade=true" />
				<arg value="${jdbc_connection_pool_id}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="deleteMailRes">
		<sequential>
			<asadmin.domain command="delete-javamail-resource" failonerror="false">
				<arg value="${mail_jndi_name}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="deleteJmsRes">
		<attribute name="targetname" default="server" />
		<attribute name="jmsname" />
		<sequential>
			<asadmin.domain command="delete-jms-resource" failonerror="false">
				<arg value="--target" />
				<arg value="@{targetname}" />
				<arg value="@{jmsname}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<target name="deleteJmsRes">
		<deleteJmsRes jmsname="${jms_name}" />
	</target>

	<target name="createWebServicePortSecure" depends="checkIfWSPortSecureSet" if="isPortSecureSet">
		<asadmin.domain command="delete-http-listener" failonerror="false">
			<arg value="ws-listener-secure" />
		</asadmin.domain>
		<asadmin.domain command="create-http-listener">
			<arg value="--listeneraddress" />
			<arg value="0.0.0.0" />
			<arg value="--listenerport" />
			<arg value="${glassfish.domain.WS_PORT_SECURE}" />
			<arg value="--defaultvs" />
			<arg value="server" />
			<arg value="--target" />
			<arg value="${target.name}" />
			<arg value="ws-listener-secure" />
		</asadmin.domain>
	</target>

	<target name="createSSL" depends="checkIfWSPortSecureSet" if="isPortSecureSet">
		<asadmin.domain command="delete-ssl" failonerror="false">
			<arg value="--type" />
			<arg value="http-listener" />
			<arg value="ws-listener-secure" />
		</asadmin.domain>
		<asadmin.domain command="create-ssl">
			<arg value="--type" />
			<arg value="http-listener" />
			<arg value="--certname" />
			<arg value="s1as" />
			<arg value="ws-listener-secure" />
		</asadmin.domain>
	</target>

	<target name="checkIfWSPortSet">
		<condition property="isPortSet">
			<isset property="glassfish.domain.WS_PORT" />
		</condition>
	</target>

	<target name="checkIfWSPortSecureSet">
		<condition property="isPortSecureSet">
			<isset property="glassfish.domain.WS_PORT_SECURE" />
		</condition>
	</target>

	<macrodef name="updateProp">
		<attribute name="propFile" />
		<attribute name="key" />
		<attribute name="value" />
		<attribute name="comment" />
		<sequential>
			<taskdef name="propertyfile" classname="org.apache.tools.ant.taskdefs.optional.PropertyFile" classpath="${glassfish.home}/lib/ant/lib/ant-nodeps.jar" />
			<propertyfile file="@{propFile}" comment="@{comment}">
				<entry key="@{key}" value="@{value}" />
			</propertyfile>
		</sequential>
	</macrodef>

	<macrodef name="processResourcesXml">
		<attribute name="restemplate" default="resources-template.xml" />
		<attribute name="resoutput" default="resources.xml" />
		<sequential>
			<condition property="mail.user.setting" value="${mail.user}">
				<not>
					<equals arg1="${mail.user}" arg2="" />
				</not>
			</condition>
			<condition property="mail.pwd.setting" value="${mail.pwd}">
				<not>
					<equals arg1="${mail.pwd}" arg2="" />
				</not>
			</condition>
			<condition property="mail.user.setting" value="saas">
				<and>
					<equals arg1="${mail.user}" arg2="" />
					<isfalse value="${mail.use.authentication}" />
				</and>
			</condition>
			<condition property="mail.pwd.setting" value="saas">
				<and>
					<equals arg1="${mail.pwd}" arg2="" />
					<isfalse value="${mail.use.authentication}" />
				</and>
			</condition>
			<copy file="${domains.dir}/${domain.dir}/installer/@{restemplate}" toFile="${domains.dir}/${domain.dir}/installer/@{resoutput}" overwrite="true">
				<filterset>
					<filter token="DB.USER" value="${db.user.name}" />
					<filter token="SERVER.NAME" value="${db.host}" />
					<filter token="ROLE.NAME" value="${db.user.name}" />
					<filter token="DATABASE.NAME" value="${db.name}" />
					<filter token="DB.PASSWORD" value="${db.user.pwd}" />
					<filter token="PORT.NUMBER" value="${db.port}" />
					<filter token="MAIL.HOST" value="${mail.host}" />
					<filter token="MAIL.FROM" value="${mail.response.address}" />
					<filter token="MAIL.PORT" value="${mail.port}" />
					<filter token="MAIL.USER" value="${mail.user.setting}" />
					<filter token="MAIL.PASSWORD" value="${mail.pwd.setting}" />
					<filter token="MAIL.AUTH" value="${mail.use.authentication}" />
					<filter token="MAIL.TIMEOUT" value="${mail.timeout}" />
					<filter token="MAIL.CONNECTIONTIMEOUT" value="${mail.connectiontimeout}" />
					<filter token="JMS.USER.NAME" value="${jms.user.name}" />
					<filter token="JMS.USER.PWD" value="${jms.user.pwd}" />
					<filter token="REMOTE.JMS.HOST" value="${glassfish.domain.remote.jms.host}" />
					<filter token="REMOTE.JMS.PORT" value="${glassfish.domain.remote.jms.port}" />
				</filterset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="createJVMOptions">
		<attribute name="target" default="server" />
		<attribute name="jvmoptions" />
		<sequential>
			<asadmin.domain command="create-jvm-options" failonerror="false">
				<arg value="--target" />
				<arg value="@{target}" />
				<arg value="@{jvmoptions}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="addRes">
		<attribute name="resfile" default="resources.xml" />
		<sequential>
			<asadmin.domain command="add-resources">
				<arg value="--target" />
				<arg value="server" />
				<arg value="${domains.dir}/${domain.dir}/installer/@{resfile}" />
			</asadmin.domain>
			<delete file="${domains.dir}/${domain.dir}/installer/@{resfile}" failonerror="false" />
		</sequential>
	</macrodef>

	<macrodef name="setAttribute">
		<attribute name="attribute" />
		<sequential>
			<asadmin.domain command="set">
				<arg value="@{attribute}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="deleteJVMOptions">
		<attribute name="target" default="server" />
		<attribute name="jvmoptions" />
		<sequential>
			<asadmin.domain command="delete-jvm-options" failonerror="false">
				<arg value="--target" />
				<arg value="@{target}" />
				<arg value="@{jvmoptions}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="deleteExistingRealm">
		<attribute name="realm.name" />
		<sequential>
			<asadmin.domain command="delete-auth-realm" failonerror="false">
				<arg value="@{realm.name}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="createRealm">
		<attribute name="realm.name" />
		<sequential>
			<asadmin.domain command="create-auth-realm">
				<arg value="--target" />
				<arg value="${target.name}" />
				<arg value="--classname" />
				<arg value="org.oscm.security.ADMRealm" />
				<arg value="--property" />
				<arg value="jaas-context=bssRealm" />
				<arg value="@{realm.name}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="deployApp">
		<attribute name="appfile" />
		<attribute name="targetname" default="server" />
		<sequential>
			<asadmin.domain command="deploy">
				<arg value="--target" />
				<arg value="@{targetname}" />
				<arg value="@{appfile}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="redeployApp">
		<attribute name="appfile" />
		<attribute name="app.name" />
		<attribute name="targetname" default="server" />
		<sequential>
			<asadmin.domain command="redeploy">
				<arg value="--name" />
				<arg value="@{app.name}" />
				<arg value="--target" />
				<arg value="@{targetname}" />
				<arg value="@{appfile}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="deployWar">
		<attribute name="warfile" />
		<attribute name="targetname" default="server" />
		<sequential>
			<asadmin.domain command="deploy">
				<arg value="--target" />
				<arg value="@{targetname}" />
				<arg value="@{warfile}" />
			</asadmin.domain>
		</sequential>
	</macrodef>


	<macrodef name="setLoggingLevel">
		<attribute name="loggername" />
		<sequential>
			<asadmin.domain command="set-log-levels">
				<arg value="@{loggername}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="setFileRotationHistory">
		<attribute name="rotationEntry" />
		<sequential>
			<asadmin.domain command="set-log-attributes">
				<arg value="@{rotationEntry}" />
			</asadmin.domain>
		</sequential>
	</macrodef>

	<macrodef name="asadmin.domain">
		<attribute name="command" />
		<attribute name="failonerror" default="true" />
		<attribute name="port" default="${glassfish.domain.portadmin}" />
		<attribute name="user" default="${glassfish.domain.admin.user}" />
		<attribute name="pwd" default="${glassfish.domain.admin.pwd}" />
		<attribute name="masterpwd" default="${glassfish.domain.master.pwd}" />
		<element name="args" implicit="yes" optional="yes" />
		<sequential>
			<asadmin failonerror="@{failonerror}" command="@{command}" port="@{port}" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}">
				<args />
			</asadmin>
		</sequential>
	</macrodef>

	<macrodef name="echoGlassfishProperties">
		<sequential>
			<echo message="--- glassfish properties ---" />
			<echo message="glassfish.home: ${glassfish.home}" />
			<echo message="glassfish.asadmin.file: ${glassfish.asadmin.file}" />
			<echo message="glassfish.imq.dir: ${glassfish.imq.dir}" />
		</sequential>
	</macrodef>

	<macrodef name="verifyGlassfishProperties">
		<sequential>
			<condition property="glassfish.properties.complete">
				<and>
					<isset property="glassfish.home" />
					<isset property="glassfish.asadmin.file" />
					<isset property="glassfish.imq.dir" />
				</and>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="echoJarProperties">
		<sequential>
			<echo message="--- jar properties ---" />
			<echo message="jdbc.driver.jar.name:  ${jdbc.driver.jar.name}" />
		</sequential>
	</macrodef>

	<macrodef name="verifyJarProperties">
		<sequential>
			<condition property="jar.properties.complete">
				<or>
					<isfalse value="${jar.property.verify}" />
					<isset property="jdbc.driver.jar.name" />
				</or>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="echoDbProperties">
		<sequential>
			<echo message="--- db properties ---" />
			<echo message="db.host:       ${db.host}" />
			<echo message="db.port:       ${db.port}" />
			<echo message="db.user.name:  ${db.user.name}" />
			<echo message="db.user.pwd:   ${db.user.pwd}" />
			<echo message="db.name:       ${db.name}" />
		</sequential>
	</macrodef>

	<macrodef name="verifyDbProperties">
		<sequential>
			<condition property="db.properties.complete">
				<or>
					<isfalse value="${db.property.verify}" />
					<and>
						<isset property="db.host" />
						<isset property="db.port" />
						<isset property="db.user.name" />
						<isset property="db.user.pwd" />
						<isset property="db.name" />
					</and>
				</or>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="echoDomainProperties">
		<sequential>
			<echo message="--- Domain properties ---" />
			<echo message="glassfish.home:                      ${glassfish.home}" />
			<echo message="glassfish.domain.name:               ${glassfish.domain.name}" />
			<echo message="glassfish.domain.portbase:           ${glassfish.domain.portbase}" />
			<echo message="glassfish.domain.portadmin:          ${glassfish.domain.portadmin}" />
			<echo message="glassfish.domain.admin.user:         ${glassfish.domain.admin.user}" />
			<echo message="glassfish.domain.admin.pwd:          ${glassfish.domain.admin.pwd}" />
			<echo message="glassfish.domain.admin.master.pwd:   ${glassfish.domain.admin.master.pwd}" />
		</sequential>
	</macrodef>

	<macrodef name="verifyDomainProperties">
		<sequential>
			<condition property="domain.properties.complete">
				<or>
					<isfalse value="${domain.property.verify}" />
					<and>
						<isset property="glassfish.home" />
						<isset property="glassfish.domain.name" />
						<isset property="glassfish.domain.portbase" />
						<isset property="glassfish.domain.portadmin" />
						<isset property="glassfish.domain.admin.user" />
						<isset property="glassfish.domain.admin.pwd" />
						<isset property="glassfish.domain.admin.master.pwd" />
					</and>
				</or>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="echoMailProperties">
		<sequential>
			<echo message="--- mail properties ---" />
			<echo message="mail.host:               ${mail.host}" />
			<echo message="mail.response.address:   ${mail.response.address}" />
			<echo message="mail.port:               ${mail.port}" />
			<echo message="mail.use.authentication: ${mail.use.authentication}" />
			<echo message="mail.user:               ${mail.user}" />
			<echo message="mail.pwd:                ${mail.pwd}" />
		</sequential>
	</macrodef>

	<macrodef name="verifyMailProperties">
		<sequential>
			<condition property="mail.properties.complete">
				<or>
					<isfalse value="${mail.property.verify}" />
					<and>
						<isset property="mail.host" />
						<isset property="mail.port" />
						<isset property="mail.use.authentication" />
						<isset property="mail.user" />
						<isset property="mail.pwd" />
					</and>
				</or>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="create.pwd.file">
		<attribute name="pwd" default="${defaultpwd}" />
		<attribute name="masterpwd" default="${defaultmasterpwd}" />
		<attribute name="fileprefix" default="script" />
		<attribute name="property" default="temp.pwd.file" />
		<sequential>
			<mkdir dir="${java.io.tmpdir}/BES" />
			<tempfile property="@{property}" destdir="${java.io.tmpdir}/BES" prefix="@{fileprefix}" suffix=".txt" deleteonexit="true" />
			<echo file="${@{property}}" append="false">
AS_ADMIN_PASSWORD=@{pwd}
AS_ADMIN_MASTERPASSWORD=@{masterpwd}
    </echo>
		</sequential>
	</macrodef>

	<macrodef name="asadmin_noauth">
		<attribute name="command" />
		<attribute name="failonerror" default="true" />
		<element name="args" implicit="yes" optional="yes" />
		<sequential>
			<echo message="asadmin @{command}" level="info" />
			<exec executable="${glassfish.asadmin.file}" failonerror="@{failonerror}">
				<arg value="@{command}" />
				<args />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="asadmin">
		<attribute name="command" />
		<attribute name="port" default="${glassfish.domain.portadmin}" />
		<attribute name="user" default="${glassfish.domain.admin.user}" />
		<attribute name="pwd" default="${glassfish.domain.admin.pwd}" />
		<attribute name="masterpwd" default="${glassfish.domain.admin.master.pwd}" />
		<attribute name="failonerror" default="true" />
		<attribute name="fileprefix" default="script" />
		<element name="args" implicit="yes" optional="yes" />
		<sequential>
			<create.pwd.file pwd="@{pwd}" masterpwd="@{masterpwd}" property="temp.pwd.file" fileprefix="@{fileprefix}" />
			<echo message="asadmin --user @{user} --passwordfile ${temp.pwd.file} --port @{port} @{command}" level="info" />
			<exec executable="${glassfish.asadmin.file}" failonerror="@{failonerror}">
				<arg value="--user" />
				<arg value="@{user}" />
				<arg value="--passwordfile" />
				<arg value="${temp.pwd.file}" />
				<arg value="--port" />
				<arg value="@{port}" />
				<arg value="@{command}" />
				<args />
			</exec>
			<!-- <delete file="${temp.pwd.file}" failonerror="false" quiet="true" /> -->
		</sequential>
	</macrodef>

	<macrodef name="asadmin_noport">
		<attribute name="command" />
		<attribute name="user" default="${glassfish.domain.admin.user}" />
		<attribute name="pwd" default="${glassfish.domain.admin.pwd}" />
		<attribute name="masterpwd" default="${glassfish.domain.admin.master.pwd}" />
		<attribute name="failonerror" default="true" />
		<attribute name="fileprefix" default="script" />
		<element name="args" implicit="yes" optional="yes" />
		<sequential>
			<create.pwd.file pwd="@{pwd}" masterpwd="@{masterpwd}" property="temp.pwd.file" fileprefix="@{fileprefix}" />
			<echo message="asadmin --user @{user} --passwordfile ${temp.pwd.file} @{command}" level="info" />
			<exec executable="${glassfish.asadmin.file}" failonerror="@{failonerror}">
				<arg value="--user" />
				<arg value="@{user}" />
				<arg value="--passwordfile" />
				<arg value="${temp.pwd.file}" />
				<arg value="@{command}" />
				<args />
			</exec>
			<!-- <delete file="${temp.pwd.file}" failonerror="false" quiet="true" /> -->
		</sequential>
	</macrodef>

	<macrodef name="startDomain">
		<attribute name="domain" />
		<attribute name="host" default="localhost" />
		<attribute name="user" default="${glassfish.domain.admin.user}" />
		<attribute name="pwd" default="${glassfish.domain.admin.pwd}" />
		<attribute name="masterpwd" default="${glassfish.domain.admin.master.pwd}" />
		<attribute name="port" default="${glassfish.domain.portadmin}" />
		<attribute name="failonerror" default="true" />
		<sequential>
			<parallel>
				<daemons>
					<startDomainWithoutChecks domain="@{domain}" port="@{port}" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}" />
				</daemons>
			</parallel>
			<echo message="Check whether domain @{domain} starts..." />
			<sleep seconds="1" description="Sleep a second before checking whether domain @{domain} starts" />
			<waitfor maxwait="${glassfish.domain.start.maxWaitSeconds}" maxwaitunit="second" checkevery="1" checkeveryunit="second" timeoutproperty="domainNotStarting">
				<socket server="@{host}" port="@{port}" />
			</waitfor>
			<echo message="Check whether domain starts is finished!" />
			<antcall target="startDomainViaTarget">
				<param name="domainToStart" value="@{domain}" />
				<param name="portToStart" value="@{port}" />
				<param name="user" value="@{user}" />
				<param name="pwd" value="@{pwd}" />
				<param name="masterpwd" value="@{masterpwd}" />
			</antcall>
			<waitForRunningDomain host="@{host}" port="@{port}" user="@{user}" pwd="@{pwd}" />
		</sequential>
	</macrodef>

	<target name="startDomainViaTarget" if="domainNotStarting">
		<echo message="Start domain again because it seems domain ${domainToStart} is not starting." />
		<startDomainWithoutChecks domain="${domainToStart}" port="${portToStart}" user="${user}" pwd="${pwd}" masterpwd="${masterpwd}" />
	</target>

	<!-- Used by startDomainWithoutChecks target. It starts the domain only without any running checks -->
	<macrodef name="startDomainWithoutChecks">
		<attribute name="domain" />
		<attribute name="host" default="localhost" />
		<attribute name="user" default="${glassfish.domain.admin.user}" />
		<attribute name="pwd" default="${glassfish.domain.admin.pwd}" />
		<attribute name="masterpwd" default="${glassfish.domain.admin.master.pwd}" />
		<attribute name="port" default="${glassfish.domain.portadmin}" />
		<attribute name="failonerror" default="true" />
		<sequential>
			<parallel>
				<daemons>
					<asadmin_noport command="start-domain" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}" failonerror="@{failonerror}">
						<arg value="@{domain}" />
					</asadmin_noport>
				</daemons>
			</parallel>
		</sequential>
	</macrodef>

	<macrodef name="waitForRunningDomain">
		<attribute name="host" default="localhost" />
		<attribute name="port" default="${glassfish.domain.portadmin}" />
		<attribute name="user" default="${glassfish.domain.admin.user}" />
		<attribute name="pwd" default="${glassfish.domain.admin.pwd}" />
		<attribute name="maxWaitSeconds" default="${glassfish.domain.start.maxWaitSeconds}" />
		<sequential>
			<!-- short sleep for sureness -->
			<sleep seconds="5" />
			<echo message="WAITING for running domain: @{host}:@{port} max. @{maxWaitSeconds} seconds." />
			<!-- socket must be there -->
			<waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
				<socket server="@{host}" port="@{port}" />
			</waitfor>
			<echo message="... domain readiness check: step 1/7 successful -> socket is running!" />
			<!-- version page of asadmin webconsole must be present -->
			<waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
				<http url="http://@{host}:@{port}/__asadmin/version" errorsBeginAt="404" />
			</waitfor>
			<echo message="... domain readiness check: step 2/7 successful -> domain version page present!" />
			<!-- locations page of asadmin webconsole must be present -->
			<waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
				<http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="404" />
			</waitfor>
			<echo message="... domain readiness check: step 3/7 successful -> domain location page present!" />
			<!-- analyse location page of asadmin webconsole: No failure command 'V3 cannot process' should be displayed-->
			<waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
				<not>
					<resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="V3 cannot process" />
				</not>
			</waitfor>
			<echo message="... domain readiness check: step 4/7 successful -> domain location page informs readiness!" />
			<waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
				<or>
					<!-- the glassfish admin already logged in via HTTP BASIC authentication -->
					<and>
						<http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="400" />
						<resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
					</and>
					<!-- the glassfish admin is not logged in. Login screen is displayed. -->
					<and>
						<not>
							<resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
						</not>
						<http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="402" />
					</and>
				</or>
			</waitfor>
			<echo message="... domain readiness check: step 5/7 successful -> domain location page informs readiness!" />
			<!-- if the glassfish admin not logged in via HTTP BASIC authenticatin, above check will fail. Followings are to ensure login. -->
			<tempfile property="temp.http.get.file.name" destdir="${java.io.tmpdir}/BES" prefix="httpget" suffix=".txt" deleteonexit="true" />
			<get src="http://@{host}:@{port}/__asadmin/__locations" dest="${temp.http.get.file.name}" username="@{user}" password="@{pwd}" verbose="true" ignoreerrors="true" />
			<!-- Sometimes, it is not ready to login. Therefore, login once more. -->
			<tempfile property="temp2.http.get.file.name" destdir="${java.io.tmpdir}/BES" prefix="httpget" suffix=".txt" deleteonexit="true" />
			<get src="http://@{host}:@{port}/__asadmin/__locations" dest="${temp2.http.get.file.name}" username="@{user}" password="@{pwd}" verbose="true" ignoreerrors="true" />
			<echo message="... domain readiness check: step 6/7 successful -> domain location page informs readiness!" />
			<waitfor maxwait="@{maxWaitSeconds}" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="startDomain.timedOut">
				<or>
					<!-- the glassfish admin already logged in via HTTP BASIC authentication -->
					<and>
						<http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="400" />
						<resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
					</and>
					<!-- the glassfish admin is not logged in. Login screen is displayed. -->
					<and>
						<not>
							<resourcecontains resource="http://@{host}:@{port}/__asadmin/__locations" substring="SUCCESS" />
						</not>
						<http url="http://@{host}:@{port}/__asadmin/__locations" errorsBeginAt="402" />
					</and>
				</or>
			</waitfor>
			<echo message="DOMAIN READY (step 7/7 successful)!" />
			<delete file="${temp.http.get.file.name}" failonerror="false" verbose="false" />
			<delete file="${temp2.http.get.file.name}" failonerror="false" verbose="false" />
			<!-- short sleep for sureness -->
			<sleep seconds="5" />
		</sequential>
	</macrodef>

	<macrodef name="createDomainWithPortbase">
		<attribute name="domain" default="${glassfish.domain.name}" />
		<attribute name="portbase" default="${glassfish.domain.portbase}" />
		<attribute name="user" default="${glassfish.domain.admin.user}" />
		<attribute name="pwd" default="${glassfish.domain.admin.pwd}" />
		<attribute name="masterpwd" default="${glassfish.domain.admin.master.pwd}" />
		<attribute name="failonerror" default="true" />
		<sequential>
			<asadmin_noport command="create-domain" failonerror="@{failonerror}" user="@{user}" pwd="@{pwd}" masterpwd="@{masterpwd}">
				<arg value="--portbase" />
				<arg value="@{portbase}" />
				<arg value="--savemasterpassword=true" />
				<arg value="@{domain}" />
			</asadmin_noport>
			<!-- <signcertificate keystore="${glassfish.bes.domain.dir}/config/keystore.jks" />
      <importrootca keystore="${glassfish.bes.domain.dir}/config/cacerts.jks" /> -->
			<antcall target="modifyGFConfigInCaseOfSeverJVM" />
		</sequential>
	</macrodef>

	<condition property="checkJVM">
		<istrue value="${glassfish.jvm.server}" />
	</condition>
	<target name="modifyGFConfigInCaseOfSeverJVM" if="checkJVM">
		<modifyGFConfigForServerJVM path="${glassfish.home}/glassfish/domains/${glassfish.domain.name}/config" />
	</target>

	<macrodef name="modifyGFConfigForServerJVM">
		<attribute name="path" />
		<sequential>
			<replaceregexp file="@{path}/domain.xml" match="&lt;/java\-config&gt;" replace="&lt;jvm\-options&gt;\-server&lt;/jvm\-options&gt;&lt;/java\-config&gt;" />
		</sequential>
	</macrodef>

	<macrodef name="deleteDomain">
		<attribute name="domain" default="${glassfish.domain.name}" />
		<attribute name="failonerror" default="true" />
		<sequential>
			<asadmin_noauth command="delete-domain" failonerror="@{failonerror}">
				<arg value="@{domain}" />
			</asadmin_noauth>
		</sequential>
	</macrodef>

	<macrodef name="stopDomain">
		<attribute name="domain" default="${glassfish.domain.name}" />
		<attribute name="failonerror" default="true" />
		<attribute name="waitSeconds" default="${glassfish.domain.stop.waitSeconds}" />
		<sequential>
			<echo message="Wait for @{waitSeconds} seconds to stop the domain." />
			<asadmin_noauth command="stop-domain" failonerror="@{failonerror}">
				<arg value="--kill=true" />
				<arg value="@{domain}" />
			</asadmin_noauth>
			<!-- short sleep for sureness -->
			<sleep seconds="@{waitSeconds}" />
		</sequential>
	</macrodef>

	<!-- create a timestamp -->
	<macrodef name="timestamp.echo">
		<attribute name="message" />
		<attribute name="level" />
		<sequential>
			<tstamp>
				<format property="current.time" pattern="HH:mm:ss.SSSZ" />
			</tstamp>
			<echo message="[${current.time}] @{message}" level="@{level}" />
		</sequential>
	</macrodef>

	<!-- check ant version -->
	<macrodef name="antCheckVersion">
		<attribute name="required" />
		<sequential>
			<fail message="Script requires Ant version @{required}">
				<condition>
					<not>
						<contains string="${ant.version}" substring="@{required}" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<macrodef name="packageFiles">
		<attribute name="destfile" />
		<attribute name="dir" />
		<sequential>
			<zip destfile="@{destfile}" update="true">
				<fileset dir="@{dir}">
					<include name="**/*" />
				</fileset>
			</zip>
		</sequential>
	</macrodef>

	<macrodef name="unpackageEar">
		<attribute name="src" />
		<attribute name="dest" />
		<sequential>
			<unzip src="${domains.dir}/${domain.dir}/applications/${ear.name}" dest="${tmp.ear.dir}" />
		</sequential>
	</macrodef>
</project>