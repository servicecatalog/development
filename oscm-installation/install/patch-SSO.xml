<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright FUJITSU LIMITED 2016-->
 
<project name="patch script for SSO " default="" basedir=".">

  <description />

  <!-- property files and imports -->
  <property environment="env" />
  <property name="domains.dir" value="${basedir}/../domains" />
  <import file="macrodefs-glassfish.xml" />


  <!-- ant-contrib tasks (foreach) -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="ant-contrib/ant-contrib-1.0b3.jar" />
    </classpath>
  </taskdef>

  <target name="checkIfSamlSP" depends="backupEar">
    <condition property="samlSP">
      <or>
        <equals arg1="${AUTH_MODE}" arg2="SAML_SP" />
        <equals arg1="${BSS_AUTH_MODE}" arg2="SAML_SP" />
      </or>
    </condition>
  </target>

  <target name="backupEar" if="backup">
    <delete dir="${domains.dir}/${domain.dir}/tmp" failonerror="false" />
    <mkdir dir="${domains.dir}/${domain.dir}/tmp" />
    <copy file="${domains.dir}/${domain.dir}/applications/${ear.name}" tofile="${domains.dir}/${domain.dir}/tmp/${ear.name}" overwrite="true" failonerror="false" />
  </target>

  <target name="patchAll">
    <antcall target="patchApplication" />
    <antcall target="patchController" />
  </target>

  <target name="patchApplication" depends="checkIfSamlSP" if="samlSP">
    <available file="${domains.dir}/${domain.dir}/applications/${ear.name}" property="ear.exists" />
    <fail unless="ear.exists" message="The file ${ear.name} does not exist or is invalid." />
    <if>
      <equals arg1="${install.type}" arg2="app" />
      <then>
        <antcall target="packageEarForApp" />
      </then>
      <else>
        <property name="tmp.ear.dir" value="${domains.dir}/${domain.dir}/tmp/ear" />
        <property name="tmp.jar.dir" value="${domains.dir}/${domain.dir}/tmp/jar" />
        <property name="tmp.war.dir" value="${domains.dir}/${domain.dir}/tmp/war" />
        <antcall target="createTempFolder" />
        <if>
          <equals arg1="${backup}" arg2="true" />
          <then>
            <unpackageEar src="${domains.dir}/${domain.dir}/tmp/${ear.name}" dest="${tmp.ear.dir}" />
          </then>
          <else>
            <unpackageEar src="${domains.dir}/${domain.dir}/applications/${ear.name}" dest="${tmp.ear.dir}" />
          </else>
        </if>
        <foreach list="${jar.names}" delimiter="," param="jar.name" target="repackageJar" inheritall="true" />
        <antcall target="repackageWar" inheritall="true" />
        <antcall target="packageEar" inheritall="true" />
        <antcall target="cleanFolder" />
      </else>
    </if>
  </target>

  <target name="repackageJar">
    <if>
      <equals arg1="${install.type}" arg2="bes" />
      <then>
        <mkdir dir="${tmp.jar.dir}" />
        <unzip src="${tmp.ear.dir}/${jar.name}" dest="${tmp.jar.dir}" />
        <copy todir="${tmp.jar.dir}/META-INF" overwrite="true">
          <fileset dir="${tmp.jar.dir}/javares/wsitconfig" includes="**/*.xml" />
        </copy>
        <move file="${tmp.jar.dir}/META-INF/webservices-sts.xml" tofile="${tmp.jar.dir}/META-INF/webservices.xml" overwrite="true" failonerror="false" />
        <move file="${tmp.jar.dir}/META-INF/sun-ejb-jar-sts.xml" tofile="${tmp.jar.dir}/META-INF/sun-ejb-jar.xml" overwrite="true" failonerror="false" />
        <zip destfile="${tmp.ear.dir}/${jar.name}" basedir="${tmp.jar.dir}" update="true" />
        <delete dir="${tmp.jar.dir}" failonerror="false" />
      </then>
    </if>
  </target>

  <target name="repackageWar">
    <if>
      <equals arg1="${install.type}" arg2="bes" />
      <then>
        <mkdir dir="${tmp.war.dir}" />
        <unzip src="${tmp.ear.dir}/${war.name}" dest="${tmp.war.dir}" />
        
        <copy todir="${tmp.war.dir}/WEB-INF/classes/wsdl/v1_9/STS/tmp" overwrite="true">
          <fileset dir="${tmp.war.dir}/WEB-INF/classes/wsdl/v1_9/STS" includes="**/*.wsdl" />
        </copy>
        <copy todir="${tmp.war.dir}/WEB-INF/classes/wsdl/v1_9/STS" overwrite="true">
          <fileset dir="${tmp.war.dir}/WEB-INF/classes/wsdl/v1_9/STS/tmp" includes="**/*.wsdl" />
        </copy>
        <delete dir="${tmp.war.dir}/WEB-INF/classes/wsdl/v1_9/STS/tmp" failonerror="false" />
        
        <zip destfile="${tmp.ear.dir}/${war.name}" basedir="${tmp.war.dir}" update="true" />
        <delete dir="${tmp.war.dir}" failonerror="false" />
      </then>
    </if>
  </target>

  <target name="createTempFolder">
    <mkdir dir="${tmp.ear.dir}" />
  </target>

  <target name="cleanFolder">
    <delete dir="${tmp.ear.dir}" failonerror="false" />
  </target>

  <target name="packageEar">
    <if>
      <equals arg1="${install.type}" arg2="bes" />
      <then>
        <move file="${tmp.ear.dir}/META-INF/application-sts.xml" tofile="${tmp.ear.dir}/META-INF/application.xml" overwrite="true" failonerror="false" />
        <delete file="${domains.dir}/${domain.dir}/tmp/${ear.name}" />
        <packageFiles destfile="${domains.dir}/${domain.dir}/tmp/${ear.name}" dir="${tmp.ear.dir}" />
      </then>
      <else>
        <zip destfile="${domains.dir}/${domain.dir}/tmp/${ear.name}" basedir="${tmp.ear.dir}" includes="${jar.names}" update="true" />
      </else>
    </if>
  </target>

  <target name="packageEarForApp">
    <zip destfile="${glassfish.domain.dir}/lib/OSCM-wsit.jar" basedir="${domains.dir}/${domain.dir}/wsit/" update="true" />
  </target>

  <target name="patchController" depends="checkApplibDirEmpty" if="applib.not.empty">
    <fileset id="dist.contents" dir="${domains.dir}/${domain.dir}/applications" includes="*" />
    <property name="prop.dist.contents" refid="dist.contents" />
    <foreach list="${prop.dist.contents}" delimiter=";" param="app.ear" target="patchControllerLibs" />
  </target>

  <target name="patchControllerLibs">
    <if>
      <not>
        <equals arg1="${app.ear}" arg2="oscm-app.ear" />
      </not>
      <then>
        <property name="tmp.ear.dir" value="${domains.dir}/${domain.dir}/tmp/ear" />
        <antcall target="createTempFolder" />
        <copy file="${domains.dir}/${domain.dir}/applications/${app.ear}" tofile="${domains.dir}/${domain.dir}/tmp/${app.ear}" overwrite="true" failonerror="false" />
        <unzip src="${domains.dir}/${domain.dir}/applications/${app.ear}" dest="${tmp.ear.dir}" />
        <copy todir="${tmp.ear.dir}/lib">
          <fileset dir="${domains.dir}/${domain.dir}/applib">
            <include name="**/*" />
          </fileset>
        </copy>
        <zip destfile="${domains.dir}/${domain.dir}/applications/${app.ear}" basedir="${tmp.ear.dir}" includes="**" update="true" />
        <antcall target="cleanFolder" />
      </then>
    </if>
  </target>

  <target name="checkApplibDirEmpty" depends="checkApplinDirAvailable" if="applib.exists">
    <fileset id="fs" dir="${domains.dir}/${domain.dir}/applib" />
    <condition property="applib.not.empty">
      <not>
        <length length="0">
          <fileset refid="fs" />
        </length>
      </not>
    </condition>
    <echo message="${applib.not.empty}" />
  </target>

  <target name="checkApplinDirAvailable">
    <available file="${domains.dir}/${domain.dir}/applib" property="applib.exists" />
  </target>

</project>
